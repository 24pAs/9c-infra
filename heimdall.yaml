---
# Source: 9c-network/templates/namespace.yaml
apiVersion: v1
kind: Namespace
metadata:
  name: heimdall
  labels:
    app.kubernetes.io/instance: heimdall
---
# Source: 9c-network/templates/worldboss.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::319679068466:role/9c-onboarding-eks
  labels:
    app.kubernetes.io/instance: heimdall
  name: heimdall-onboarding-iam-role
  namespace: heimdall
---
# Source: 9c-network/templates/configmap-appsettings.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: appsettings
  namespace: heimdall
  labels:
    app.kubernetes.io/instance: heimdall
data:
  appsettings.json: |- 
    {
        "$schema": "https://raw.githubusercontent.com/planetarium/NineChronicles.Headless/main/NineChronicles.Headless.Executable/appsettings-schema.json",
        "Serilog": {
            "Using": [
                "Serilog.Expressions",
                "Serilog.Sinks.Console",
                "Serilog.Sinks.RollingFile"
            ],
            "MinimumLevel": "Debug",
            "WriteTo": [
                {
                    "Name": "Logger",
                    "Args": {
                        "configureLogger": {
                            "WriteTo": [
                                {
                                    "Name": "Console",
                                    "Args": {
                                        "formatter": "Serilog.Formatting.Compact.CompactJsonFormatter, Serilog.Formatting.Compact",
                                        "outputTemplate": "[{Timestamp:HH:mm:ss} {Level:u3}] [{Source}] {Message:lj}{NewLine}{Exception}"
                                    }
                                }
                            ],
                            "Filter": [
                                {
                                    "Name": "ByIncludingOnly",
                                    "Args": {
                                        "expression": "Source is not null"
                                    }
                                }
                            ]
                        }
                    }
                },
                {
                    "Name": "Logger",
                    "Args": {
                        "configureLogger": {
                            "WriteTo": [
                                {
                                    "Name": "Console",
                                    "Args": {
                                        "formatter": "Serilog.Formatting.Compact.CompactJsonFormatter, Serilog.Formatting.Compact",
                                        "outputTemplate": "[{Timestamp:HH:mm:ss} {Level:u3}] {Message:lj}{NewLine}{Exception}"
                                    }
                                }
                            ],
                            "Filter": [
                                {
                                    "Name": "ByExcluding",
                                    "Args": {
                                        "expression": "Source is not null"
                                    }
                                }
                            ]
                        }
                    }
                }
            ],
            "Filter": [
                {
                    "Name": "ByExcluding",
                    "Args": {
                        "expression": "SourceContext = 'Libplanet.Stun.TurnClient'"
                    }
                },
                {
                    "Name": "ByExcluding",
                    "Args": {
                        "expression": "Source = 'VolatileStagePolicy'"
                    }
                },
                {
                    "Name": "ByExcluding",
                    "Args": {
                        "expression": "SourceContext = 'Libplanet.Net.Protocols.RoutingTable'"
                    }
                },
                {
                    "Name": "ByExcluding",
                    "Args": {
                        "expression": "Source = 'LoggedRenderer'"
                    }
                }
            ]
        },
        "Headless": {
            "AppProtocolVersionString": "200290/eE394bb942fa7c2d807C170C7Db7F26cb3EA037F/MEUCIQDtmXbXy9seYISvIxPbu1K5JH4yfar91pA+5qixFPp3BAIgCVAjBmO.6xBEUeyt6ezYgytsmngnI8SYKgS4GQF0jaw=/ZHU5OnRpbWVzdGFtcHUxMDoyMDI1LTAzLTEwZQ==",
            "GenesisBlockPath": "https://planets.nine-chronicles.com/planets/0x000000000001/genesis",
            "StoreType": "rocksdb",
            "StorePath": "",
            "Port": 31234,
            "IceServerStrings": [],
            "PeerStrings": ["03380b4ba8722057c9b4d8594f8de9481eb296aba4b3c168666f57b17596452ae7,heimdall-seed-1.nine-chronicles.com,31234"],
            "TrustedAppProtocolVersionSignerStrings": [
                "031c5b9cb11b1cc07f8530599fa32338967e41cb364cca552a34ad2157ccb237bf"
            ],
            "NoMiner": true,
            "RpcServer": true,
            "RpcListenHost": "127.0.0.1",
            "RpcListenPort": 31238,
            "RpcRemoteServer": true,
            "GraphQLServer": true,
            "GraphQLHost": "127.0.0.1",
            "GraphQLPort": 31280,
            "NoCors": true,
            "Confirmations": 0,
            "ChainTipStaleBehaviorType": "reboot"
        },
        "Logging": {
            "LogLevel": {
                "Microsoft": "None"
            }
        },
        "IpRateLimiting": {
            "EnableEndpointRateLimiting": false,
            "StackBlockedRequests": true,
            "RealIpHeader": "X-Real-IP",
            "HttpStatusCode": 429,
            "IpWhitelist": [
                "127.0.0.1"
            ],
            "GeneralRules": [
                {
                    "Endpoint": "*:/IBlockChainService/PutTransaction",
                    "Period": "60s",
                    "Limit": 12
                },
                {
                    "Endpoint": "*:/graphql/stagetransaction",
                    "Period": "60s",
                    "Limit": 12
                }
            ],
            "QuotaExceededResponse": {
                "Content": "{ \"message\": \"Whoa! Calm down, cowboy!\", \"details\": \"Quota exceeded. Maximum allowed: {0} per {1}. Please try again in {2} second(s).\" }",
                "ContentType": "application/json",
                "StatusCode": 429
            },
            "IpBanThresholdCount": 10,
            "IpBanMinute": 60,
            "IpBanResponse": {
                "Content": "{ \"message\": \"Your Ip has been banned.\" }",
                "ContentType": "application/json",
                "StatusCode": 403
            }
        },
        "MultiAccountManaging": {
            "EnableManaging": false,
            "ManagementTimeMinutes": 10,
            "TxIntervalMinutes": 10,
            "ThresholdCount": 29
        }
    }
---
# Source: 9c-network/templates/configmap-data-provider.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: heimdall-data-provider-script
  namespace: heimdall 
  labels:
    app.kubernetes.io/instance: heimdall
data:
  check_chain_tip.sh: |- 
    #!/usr/bin/env bash
    set -ex
    
    apt-get -y update
    apt-get -y install jq
    apt-get -y install default-mysql-client
    
    HOME="/app"
    DP_HOST=$1
    DP_USER=$2
    DP_TOKEN=$3
    DP_PORT=$4
    DP_DATABASE=$5
    RESET_SNAPSHOT_OPTION=$6
    SAVE_DIR=/data/data-provider
    
    if [[ -d "$SAVE_DIR" ]]; then
        if ! $RESET_SNAPSHOT_OPTION; then
          FILE="/data/blockIndex.txt"
          CHAIN_TIP_INDEX="$(($HOME/NineChronicles.Headless.Executable/NineChronicles.Headless.Executable chain tip "RocksDb" "$SAVE_DIR") | jq -r '.Index')"
    
          RENDERED_BLOCK_INDEX=$CHAIN_TIP_INDEX
          if [ -f "$FILE" ]; then
              RENDERED_BLOCK_INDEX="$(cat "/data/blockIndex.txt")"
          else
              echo $FILE does not exist. Get the latest block index from the database.
              MYSQL_BLOCK_INDEX=$(mysql --host=$DP_HOST --user=$DP_USER --password=$DP_TOKEN --port=$DP_PORT --database=$DP_DATABASE --skip-column-names -e "SELECT \`Index\` FROM $DP_DATABASE.Blocks order by \`Index\` desc limit 1;")
              RENDERED_BLOCK_INDEX=$MYSQL_BLOCK_INDEX
          fi
    
          TIP_DIFF=$(( $CHAIN_TIP_INDEX - $RENDERED_BLOCK_INDEX ))
          if (( $TIP_DIFF > 0 ))
          then
            echo Truncate chain tip by $TIP_DIFF.
            $HOME/NineChronicles.Headless.Executable/NineChronicles.Headless.Executable chain truncate "RocksDb" "$SAVE_DIR" $TIP_DIFF
          else
            echo No need to truncate chain tip.
          fi
        fi
    else
        echo The directory $SAVE_DIR does not exist.
    fi
    
  setup_internal_db.sh: |- 
    #!/usr/bin/env bash
    set -ex
    
    apt-get -y update
    apt-get -y install jq
    apt-get -y install default-mysql-client
    
    HOME="/app"
    NC_MySqlConnectionString="$1"
    NC_MySqlConnectionString+="Allow User Variables=true"
    MIGRATE_DB_OPTION=$2
    
    if $MIGRATE_DB_OPTION
    then
        /root/.dotnet/tools/dotnet-ef database update --project /app/NineChronicles.DataProvider/NineChronicles.DataProvider.Executable --connection "$NC_MySqlConnectionString"
    fi
---
# Source: 9c-network/templates/configmap-download-snapshot.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: heimdall-download-snapshot-script
  namespace: heimdall
  labels:
    app.kubernetes.io/instance: heimdall
data:
  download_snapshot.sh: |- 
    #!/usr/bin/env bash
    
    cd /data
    
    until apt-get -y update
    do
      echo "Try again"
    done
    
    until apt-get -y install curl jq wget aria2 sudo zip
    do
      echo "Try again"
    done
    
    base_url=${1:-https://snapshots.nine-chronicles.com/main/heimdall/partition}
    save_dir=${2:-"9c-main-snapshot_$(date +%Y%m%d_%H)"}
    download_option=$3
    service_name=$4
    SLACK_WEBHOOK=$5
    rollback_snapshot=${6:-"false"}
    complete_snapshot_reset=${7:-"false"}
    mainnet_snapshot_json_filename="latest.json"
    
    function download_with_retry() {
      local url=$1
      local save_dir=$2
      local output_file=$3
    
      while true; do
        echo "Downloading $url"
    
        aria2c "$url" -d "$2" -o "$3" -j5 -x5 --continue=true
        if [ ! -f "$save_dir/$output_file.aria2" ] && [ -f "$save_dir/$output_file" ]; then
            echo "Download successful: $save_dir/$output_file"
            return 0
        fi
    
        echo "Download failed (.aria2 file detected). Retrying in 10 seconds..."
        rm -f "$save_dir/$output_file" "$save_dir/$output_file.aria2"
        sleep 10
      done
    }
    
    
    if [ $download_option = "true" ]
    then
      echo "Start download snapshot"
      if [ $service_name != "snapshot" ]
      then
        echo $service_name
      fi
    
      # strip tailing slash
      base_url=${base_url%/}
    
      function get_snapshot_value() {
          snapshot_json_url="$1"
          snapshot_param="$2"
    
          snapshot_param_return_value=$(curl --silent "$snapshot_json_url" | jq ".$snapshot_param")
          echo "$snapshot_param_return_value"
      }
    
      function download_unzip_partial_snapshot() {
        snapshot_json_filename="latest.json"
        snapshot_zip_filename="state_latest.zip"
        snapshot_zip_filename_array=("$snapshot_zip_filename")
        mainnet_snapshot_json_url="$base_url/$mainnet_snapshot_json_filename"
        mainnet_snapshot_blockIndex=$(get_snapshot_value "$mainnet_snapshot_json_url" "Index")
        mainnet_snapshot_blockEpoch=$(get_snapshot_value "$mainnet_snapshot_json_url" "BlockEpoch")
    
        if [ "$mainnet_snapshot_blockEpoch" -le $1 ]; then
            if [ $rollback_snapshot = "false" ]; then
              if [ "$mainnet_snapshot_blockIndex" -le $2 ]; then
                  echo "Skip snapshot download because the local chain tip is greater than the snapshot tip."
                  return
              fi
            fi
        fi
    
        while :
        do
            snapshot_json_url="$base_url/$snapshot_json_filename"
            BlockEpoch=$(get_snapshot_value "$snapshot_json_url" "BlockEpoch")
            TxEpoch=$(get_snapshot_value "$snapshot_json_url" "TxEpoch")
            PreviousBlockEpoch=$(get_snapshot_value "$snapshot_json_url" "PreviousBlockEpoch")
            PreviousTxEpoch=$(get_snapshot_value "$snapshot_json_url" "PreviousTxEpoch")
    
            snapshot_zip_filename="snapshot-$BlockEpoch-$TxEpoch.zip"
            snapshot_zip_filename_array+=("$snapshot_zip_filename")
            rm -r $save_dir/block/epoch$BlockEpoch/*
            rm -r $save_dir/tx/epoch$BlockEpoch/*
    
            if [ $(("$PreviousBlockEpoch"+2)) -lt $1 ]
            then
                break
            fi
    
            snapshot_json_filename="snapshot-$PreviousBlockEpoch-$PreviousTxEpoch.json"
        done
    
        if [[ ! -d "$save_dir" ]]
        then
            echo "[Info] The directory $save_dir does not exist and is created."
            mkdir -p "$save_dir"
        fi
    
        rm -r $save_dir/block/blockindex/*
        rm -r $save_dir/tx/txindex/*
        rm -r $save_dir/txbindex/*
        rm -r $save_dir/blockcommit/*
        rm -r $save_dir/txexec/*
        rm -r $save_dir/states/*
    
        for ((i=${#snapshot_zip_filename_array[@]}-1; i>=0; i--))
        do
            snapshot_zip_filename="${snapshot_zip_filename_array[$i]}"
            rm "$snapshot_zip_filename" 2>/dev/null
    
            snapshot_zip_url="$base_url/$snapshot_zip_filename"
            echo "$snapshot_zip_url"
    
            #aria2c "$snapshot_zip_url" -d "$save_dir" -j10 -x10 --continue=true
            download_with_retry "$snapshot_zip_url" "$save_dir" "$snapshot_zip_filename"
            echo "Unzipping $snapshot_zip_filename"
            unzip -o "$save_dir/$snapshot_zip_filename" -d "$save_dir"
            rm "$save_dir/$snapshot_zip_filename"
        done
    
        if [ -f $save_dir/$mainnet_snapshot_json_filename ]; then
          rm $save_dir/$mainnet_snapshot_json_filename
        fi
    
        # aria2c "$base_url/$mainnet_snapshot_json_filename" -d "$save_dir" -o "$mainnet_snapshot_json_filename" -j10 -x10 --continue=true
        download_with_retry "$base_url/$mainnet_snapshot_json_filename" "$save_dir" "$mainnet_snapshot_json_filename"
      }
    
      function download_unzip_full_snapshot() {
          snapshot_json_filename="latest.json"
          snapshot_zip_filename="state_latest.zip"
          snapshot_zip_filename_array=("$snapshot_zip_filename")
    
          while :
          do
              snapshot_json_url="$base_url/$snapshot_json_filename"
              echo "$snapshot_json_url"
    
              BlockEpoch=$(get_snapshot_value "$snapshot_json_url" "BlockEpoch")
              TxEpoch=$(get_snapshot_value "$snapshot_json_url" "TxEpoch")
              PreviousBlockEpoch=$(get_snapshot_value "$snapshot_json_url" "PreviousBlockEpoch")
              PreviousTxEpoch=$(get_snapshot_value "$snapshot_json_url" "PreviousTxEpoch")
    
              snapshot_zip_filename="snapshot-$BlockEpoch-$TxEpoch.zip"
              snapshot_zip_filename_array+=("$snapshot_zip_filename")
    
              if [ "$PreviousBlockEpoch" -eq 0 ]
              then
                  break
              fi
    
              snapshot_json_filename="snapshot-$PreviousBlockEpoch-$PreviousTxEpoch.json"
          done
    
          if [[ ! -d "$save_dir" ]]
          then
              echo "[Info] The directory $save_dir does not exist and is created."
              mkdir -p "$save_dir"
          fi
    
          for ((i=${#snapshot_zip_filename_array[@]}-1; i>=0; i--))
          do
              snapshot_zip_filename="${snapshot_zip_filename_array[$i]}"
              rm "$snapshot_zip_filename" 2>/dev/null
    
              snapshot_zip_url="$base_url/$snapshot_zip_filename"
              echo "$snapshot_zip_url"
    
              #aria2c "$snapshot_zip_url" -j10 -x10 --continue=true
              download_with_retry "$snapshot_zip_url" "$save_dir" "$snapshot_zip_filename"
              echo "Unzipping $snapshot_zip_filename"
              unzip -o "$save_dir/$snapshot_zip_filename" -d "$save_dir"
              rm "$save_dir/$snapshot_zip_filename"
          done
    
          #aria2c "$base_url/$mainnet_snapshot_json_filename" -d "$save_dir" -o "$mainnet_snapshot_json_filename" -j10 -x10 --continue=true
          download_with_retry "$base_url/$mainnet_snapshot_json_filename" "$save_dir" "$mainnet_snapshot_json_filename"
      }
    
      if [ -f $save_dir/$mainnet_snapshot_json_filename ]
      then
        if [ $complete_snapshot_reset = "true" ]
        then
          echo "Completely delete the existing store and download a new snapshot"
          rm -r "$save_dir"
          mkdir -p "$save_dir"
          download_unzip_full_snapshot
        else
          local_chain_tip_index="$((/app/NineChronicles.Headless.Executable chain tip "RocksDb" "$save_dir") | jq -r '.Index')"
          if [ -f $save_dir/$mainnet_snapshot_json_filename ]
          then
            local_previous_mainnet_blockEpoch=$(cat "$save_dir/$mainnet_snapshot_json_filename" | jq ".BlockEpoch")
            download_unzip_partial_snapshot $local_previous_mainnet_blockEpoch $local_chain_tip_index
          else
            local_chain_tip_timestamp="$((/app/NineChronicles.Headless.Executable chain tip "RocksDb" "$save_dir") | jq -r '.Timestamp')"
            epoch_seconds=$(date -d "$local_chain_tip_timestamp" +%s)
            echo $epoch_seconds
            local_chain_tip_blockEpoch=$(($epoch_seconds / 86400))
            echo $local_chain_tip_blockEpoch
            download_unzip_partial_snapshot $local_chain_tip_blockEpoch $local_chain_tip_index
          fi
        fi
      else
        download_unzip_full_snapshot
      fi
    
      # The return value for the program that calls this script
      echo "$save_dir"
      if [ $service_name != "snapshot" ]
      then
        echo $service_name
      fi
    else
      echo "Skip download snapshot"
      if [ $service_name != "snapshot" ]
      then
        echo $service_name
      fi
    fi
---
# Source: 9c-network/templates/configmap-full.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: heimdall-snapshot-script-full
  namespace: heimdall
  labels:
    app.kubernetes.io/instance: heimdall
data:
  preload_headless.sh: |- 
    #!/usr/bin/env bash
    set -ex
    
    apt-get -y update
    apt-get -y install zip
    apt-get -y install curl
    HOME="/app"
    
    APP_PROTOCOL_VERSION=$1
    VERSION_NUMBER="${APP_PROTOCOL_VERSION:0:6}"
    SLACK_WEBHOOK=$2
    
    GENESIS_BLOCK_PATH=https://planets.nine-chronicles.com/planets/0x000000000001/genesis
    
    STORE_PATH="/data/headless"
    
    TRUSTED_APP_PROTOCOL_VERSION_SIGNER=031c5b9cb11b1cc07f8530599fa32338967e41cb364cca552a34ad2157ccb237bf
    SEED1="03380b4ba8722057c9b4d8594f8de9481eb296aba4b3c168666f57b17596452ae7,heimdall-seed-1.nine-chronicles.com,31234"
    
    ICE_SERVER="turn://0ed3e48007413e7c2e638f13ddd75ad272c6c507e081bd76a75e4b7adc86c9af:0apejou+ycZFfwtREeXFKdfLj2gCclKzz5ZJ49Cmy6I=@turn-us.planetarium.dev:3478"
    
    HEADLESS="$HOME/NineChronicles.Headless.Executable"
    HEADLESS_LOG_NAME="headless_$(date -u +"%Y%m%d%H%M").log"
    HEADLESS_LOG_DIR="/data/snapshot_logs"
    HEADLESS_LOG="$HEADLESS_LOG_DIR/$HEADLESS_LOG_NAME"
    mkdir -p "$HEADLESS_LOG_DIR"
    
    PID_FILE="$HOME/headless_pid"
    function senderr() {
      echo "$1"
      curl -X POST -H 'Content-type: application/json' --data '{"text":"[K8S] '$1'. Check snapshot-full-v'$VERSION_NUMBER' in 9c-main cluster at preload_headless.sh."}' $SLACK_WEBHOOK
    }
    
    function preload_complete() {
      echo "$1"
    }
    
    function waitpid() {
      PID="$1"
      while [ -e "/proc/$PID" ]; do
        sleep 1
      done
    }
    
    function run_headless() {
      chmod 777 -R "$STORE_PATH"
    
      "$HEADLESS" \
          --no-miner \
          --genesis-block-path="$GENESIS_BLOCK_PATH" \
          --store-type=rocksdb \
          --store-path="$STORE_PATH" \
          --app-protocol-version="$APP_PROTOCOL_VERSION" \
          --trusted-app-protocol-version-signer="$TRUSTED_APP_PROTOCOL_VERSION_SIGNER" \
          --ice-server="$ICE_SERVER" \
          --planet=Heimdall \
          --config=https://9c-cluster-config.s3.us-east-2.amazonaws.com/9c-main/heimdall/appsettings-nodeinfra.json \
          --peer "$SEED1" \
          > "$HEADLESS_LOG" 2>&1 &
    
      PID="$!"
    
      echo "$PID" | tee "$PID_FILE"
    
      if ! kill -0 "$PID"; then
        senderr "$PID doesn't exist. Failed to run headless"
        exit 1
      fi
    }
    
    function wait_preloading() {
      touch "$PID_FILE"
      PID="$(cat "$PID_FILE")"
    
      if ! kill -0 "$PID"; then
        senderr "$PID doesn't exist. Failed to run headless"
        exit 1
      fi
    
      if timeout 144000 tail -f "$HEADLESS_LOG" | grep -m1 "preloading is no longer needed"; then
        sleep 60
      else
        senderr "grep failed. Failed to preload."
        kill "$PID"
        exit 1
      fi
    }
    
    function kill_headless() {
      touch "$PID_FILE"
      PID="$(cat "$PID_FILE")"
      if ! kill -0 "$PID"; then
        echo "$PID doesn't exist. Failed to kill headless"
      else
        kill -KILL "$PID"
        waitpid "$PID" || true
        chmod 777 -R "$STORE_PATH"
      fi
    }
    
    function rotate_log() {
      cd "$HEADLESS_LOG_DIR"
      if ./*"$(date -d 'yesterday' -u +'%Y%m%d')"*.log; then
        zip "$(date -d 'yesterday' -u +'%Y%m%d')".zip ./*"$(date -d 'yesterday' -u +'%Y%m%d')"*.log
        rm ./*"$(date -d 'yesterday' -u +'%Y%m%d')"*.log
      fi
    }
    
    trap '' HUP
    
    run_headless
    wait_preloading
    preload_complete "Preloading completed"
    kill_headless
    rotate_log
    
  upload_snapshot.sh: |- 
    #!/usr/bin/env bash
    set -ex
    
    apt-get -y update
    apt-get -y install curl
    apt-get -y install zip
    apt-get -y install unzip
    apt-get -y install sudo
    apt-get -y install p7zip
    
    uname=$(uname -r)
    arch=${uname##*.}
    if [ "$arch" = "aarch64" ]; then
      curl "https://awscli.amazonaws.com/awscli-exe-linux-aarch64-2.22.35.zip" -o "awscliv2.zip"
    else
      curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64-2.22.35.zip" -o "awscliv2.zip"
    fi
    unzip awscliv2.zip
    sudo ./aws/install
    
    HOME="/app"
    STORE_PATH="/data/headless"
    APP_PROTOCOL_VERSION=$1
    VERSION_NUMBER="${APP_PROTOCOL_VERSION:0:6}"
    SLACK_WEBHOOK=$2
    CF_DISTRIBUTION_ID=$3
    SNAPSHOT_PATH=$4
    
    export AWS_ENDPOINT_URL_S3="https://1cd1f38b21c0bfdde9501f7d8e43b663.r2.cloudflarestorage.com"
    export AWS_DEFAULT_REGION=auto
    
    function senderr() {
      echo "$1"
      curl -X POST -H 'Content-type: application/json' --data '{"text":"[K8S] '$1'. Check snapshot in 9c-main cluster at upload_snapshot.sh."}' $SLACK_WEBHOOK
    }
    
    function make_and_upload_snapshot() {
      SNAPSHOT="$HOME/NineChronicles.Snapshot"
      OUTPUT_DIR="/data/snapshots"
      PARTITION_DIR="/data/snapshots/partition"
      STATE_DIR="/data/snapshots/state"
      METADATA_DIR="/data/snapshots/metadata"
      FULL_DIR="/data/snapshots/full"
      URL="https://snapshots.nine-chronicles.com/$2/latest.json"
    
      mkdir -p "$OUTPUT_DIR" "$PARTITION_DIR" "$STATE_DIR" "$METADATA_DIR"
      if curl --output /dev/null --silent --head --fail "$URL"; then
        curl "$URL" -o "$METADATA_DIR/latest.json"
      else
        echo "URL does not exist: $URL"
      fi
    
      rm -r "$FULL_DIR/*" || true
    
      if ! "$SNAPSHOT" --output-directory "$OUTPUT_DIR" --store-path "$STORE_PATH" --block-before 0 --apv "$1" --snapshot-type "full"; then
        senderr "Snapshot creation failed." "$SLACK_WEBHOOK"
        exit 1
      fi
    
      # shellcheck disable=SC2012
      LATEST_FULL_SNAPSHOT=$(ls -t $FULL_DIR/*.zip | head -1)
      UPLOAD_FULL_SNAPSHOT_FILENAME="9c-main-snapshot"
      FULL_SNAPSHOT_FILENAME="$UPLOAD_FULL_SNAPSHOT_FILENAME.zip"
      FULL_SNAPSHOT_FILENAME_7Z="$UPLOAD_FULL_SNAPSHOT_FILENAME.7z"
    
      LATEST_METADATA=$(ls -t $METADATA_DIR/*.json | head -1)
      LATEST_METADATA_FILENAME=$(basename "$LATEST_METADATA")
      UPLOAD_METADATA_FILENAME="$UPLOAD_FULL_SNAPSHOT_FILENAME.json"
    
      S3_BUCKET_NAME="9c-snapshots"
    
      AWS="/usr/local/bin/aws"
      AWS_ACCESS_KEY_ID="$(cat "/secret/aws_access_key_id")"
      AWS_SECRET_ACCESS_KEY="$(cat "/secret/aws_secret_access_key")"
      "$AWS" configure set aws_access_key_id "$AWS_ACCESS_KEY_ID"
      "$AWS" configure set aws_secret_access_key "$AWS_SECRET_ACCESS_KEY"
      "$AWS" configure set default.region us-east-2
      "$AWS" configure set default.output json
      NOW=$(date '+%Y%m%d%H%M%S')
    
      "$AWS" s3 cp "$LATEST_FULL_SNAPSHOT" "s3://$S3_BUCKET_NAME/$2/full/$FULL_SNAPSHOT_FILENAME" --quiet --acl public-read
      "$AWS" s3 cp "$LATEST_METADATA" "s3://$S3_BUCKET_NAME/$2/full/$UPLOAD_METADATA_FILENAME" --quiet --acl public-read
      "$AWS" s3 cp "s3://$S3_BUCKET_NAME/$2/full/$FULL_SNAPSHOT_FILENAME" "s3://$S3_BUCKET_NAME/$2/archive/full/${NOW}_$FULL_SNAPSHOT_FILENAME" --quiet --acl public-read --copy-props none --metadata-directive COPY
      invalidate_cf "/$2/full/$FULL_SNAPSHOT_FILENAME"
    
      # Disable 7z snapshot
      # 7zr a -r /data/snapshots/full/7z/9c-main-snapshot-"$NOW".7z /data/headless/*
      # "$AWS" s3 cp /data/snapshots/full/7z/9c-main-snapshot-"$NOW".7z "s3://$S3_BUCKET_NAME/$2/full/$FULL_SNAPSHOT_FILENAME_7Z" --quiet --acl public-read
      # invalidate_cf "/$2/full/$FULL_SNAPSHOT_FILENAME_7Z"
      # rm /data/snapshots/full/7z/9c-main-snapshot-"$NOW".7z
      rm "$LATEST_FULL_SNAPSHOT"
    }
    
    function invalidate_cf() {
      if [[ $AWS_ENDPOINT_URL_S3 == *.r2.cloudflarestorage.com ]]; then
        return
      fi
    
      if "$AWS" cloudfront create-invalidation --distribution-id "$CF_DISTRIBUTION_ID" --paths "$1"; then
        echo "CF invalidation successful"
      else
        echo "CF invalidation failed. Trying again."
        invalidate_cf "$1"
      fi
    }
    
    trap '' HUP
    
    make_and_upload_snapshot "$APP_PROTOCOL_VERSION" "$SNAPSHOT_PATH"
---
# Source: 9c-network/templates/configmap-partition-reset.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: heimdall-snapshot-script-partition-reset
  namespace: heimdall
  labels:
    app.kubernetes.io/instance: heimdall
data:
  preload_headless.sh: |- 
    #!/usr/bin/env bash
    set -ex
    
    apt-get -y update
    apt-get -y install zip
    apt-get -y install curl
    HOME="/app"
    
    APP_PROTOCOL_VERSION=$1
    VERSION_NUMBER="${APP_PROTOCOL_VERSION:0:6}"
    SLACK_WEBHOOK=$2
    
    GENESIS_BLOCK_PATH="https://planets.nine-chronicles.com/planets/0x000000000001/genesis"
    STORE_PATH="/data/headless"
    TRUSTED_APP_PROTOCOL_VERSION_SIGNER="031c5b9cb11b1cc07f8530599fa32338967e41cb364cca552a34ad2157ccb237bf"
    SEED1="03380b4ba8722057c9b4d8594f8de9481eb296aba4b3c168666f57b17596452ae7,heimdall-seed-1.nine-chronicles.com,31234"
    
    ICE_SERVER="turn://0ed3e48007413e7c2e638f13ddd75ad272c6c507e081bd76a75e4b7adc86c9af:0apejou+ycZFfwtREeXFKdfLj2gCclKzz5ZJ49Cmy6I=@turn-us.planetarium.dev:3478"
    
    HEADLESS="$HOME/NineChronicles.Headless.Executable"
    HEADLESS_LOG_NAME="headless_$(date -u +"%Y%m%d%H%M").log"
    HEADLESS_LOG_DIR="/data/snapshot_logs"
    HEADLESS_LOG="$HEADLESS_LOG_DIR/$HEADLESS_LOG_NAME"
    mkdir -p "$HEADLESS_LOG_DIR"
    
    PID_FILE="$HOME/headless_pid"
    function senderr() {
      echo "$1"
      curl -X POST -H 'Content-type: application/json' --data '{"text":"[K8S] '$1'. Check snapshot-partition-reset-v'$VERSION_NUMBER' in 9c-main cluster at preload_headless.sh."}' $SLACK_WEBHOOK
    }
    
    function preload_complete() {
      echo "$1"
    }
    
    function waitpid() {
      PID="$1"
      while [ -e "/proc/$PID" ]; do
        sleep 1
      done
    }
    
    function run_headless() {
      chmod 777 -R "$STORE_PATH"
    
      "$HEADLESS" \
          --no-miner \
          --genesis-block-path="$GENESIS_BLOCK_PATH" \
          --store-type=rocksdb \
          --store-path="$STORE_PATH" \
          --app-protocol-version="$APP_PROTOCOL_VERSION" \
          --trusted-app-protocol-version-signer="$TRUSTED_APP_PROTOCOL_VERSION_SIGNER" \
          --ice-server="$ICE_SERVER" \
          --planet=Heimdall \
          --config=https://9c-cluster-config.s3.us-east-2.amazonaws.com/9c-main/heimdall/appsettings-nodeinfra.json \
          --peer "$SEED1" \
          > "$HEADLESS_LOG" 2>&1 &
    
      PID="$!"
    
      echo "$PID" | tee "$PID_FILE"
    
      if ! kill -0 "$PID"; then
        senderr "$PID doesn't exist. Failed to run headless"
        exit 1
      fi
    }
    
    function wait_preloading() {
      touch "$PID_FILE"
      PID="$(cat "$PID_FILE")"
    
      if ! kill -0 "$PID"; then
        senderr "$PID doesn't exist. Failed to run headless"
        exit 1
      fi
    
      if timeout 144000 tail -f "$HEADLESS_LOG" | grep -m1 "preloading is no longer needed"; then
        sleep 60
      else
        senderr "grep failed. Failed to preload."
        kill "$PID"
        exit 1
      fi
    }
    
    function kill_headless() {
      touch "$PID_FILE"
      PID="$(cat "$PID_FILE")"
      if ! kill -0 "$PID"; then
        echo "$PID doesn't exist. Failed to kill headless"
      else
        kill -KILL "$PID"
        waitpid "$PID" || true
        chmod 777 -R "$STORE_PATH"
      fi
    }
    
    function rotate_log() {
      cd "$HEADLESS_LOG_DIR"
      if ./*"$(date -d 'yesterday' -u +'%Y%m%d')"*.log; then
        zip "$(date -d 'yesterday' -u +'%Y%m%d')".zip ./*"$(date -d 'yesterday' -u +'%Y%m%d')"*.log
        rm ./*"$(date -d 'yesterday' -u +'%Y%m%d')"*.log
      fi
    }
    trap '' HUP
    
    run_headless
    wait_preloading
    preload_complete "Preloading completed"
    kill_headless
    rotate_log
    
  replace_snapshot.sh: |- 
    #!/usr/bin/env bash
    set -ex
    
    apt-get -y update
    apt-get -y install curl
    apt-get -y install zip
    apt-get -y install unzip
    apt-get -y install sudo
    
    uname=$(uname -r)
    arch=${uname##*.}
    if [ "$arch" = "aarch64" ]; then
      curl "https://awscli.amazonaws.com/awscli-exe-linux-aarch64-2.22.35.zip" -o "awscliv2.zip"
    else
      curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64-2.22.35.zip" -o "awscliv2.zip"
    fi
    unzip awscliv2.zip
    sudo ./aws/install
    
    AWS="/usr/local/bin/aws"
    AWS_ACCESS_KEY_ID="$(cat "/secret/aws_access_key_id")"
    AWS_SECRET_ACCESS_KEY="$(cat "/secret/aws_secret_access_key")"
    "$AWS" configure set aws_access_key_id $AWS_ACCESS_KEY_ID
    "$AWS" configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    "$AWS" configure set default.region us-east-2
    "$AWS" configure set default.output json
    APP_PROTOCOL_VERSION=$2
    VERSION_NUMBER="${APP_PROTOCOL_VERSION:0:6}"
    SLACK_TOKEN=$3
    CF_DISTRIBUTION_ID=$4
    
    export AWS_ENDPOINT_URL_S3="https://1cd1f38b21c0bfdde9501f7d8e43b663.r2.cloudflarestorage.com"
    export AWS_DEFAULT_REGION=auto
    
    function senderr() {
      echo "$1"
      curl --data "[K8S] $1. Check snapshot-partition-reset-v$VERSION_NUMBER in 9c-main cluster at upload_snapshot.sh." "https://planetariumhq.slack.com/services/hooks/slackbot?token=$SLACK_TOKEN&channel=%239c-mainnet"
    }
    
    function replace_snapshot() {
      ARCHIVE="archive_"$(date '+%Y%m%d')
      SNAPSHOT_PREFIX=$(echo $1 | awk '{gsub(/\//,"\\/");print}')
      ARCHIVE_PATH=$1$ARCHIVE/
      ARCHIVE_PREFIX=$(echo $ARCHIVE_PATH | awk '{gsub(/\//,"\\/");print}')
      TEMP_PREFIX=$(echo $2 | awk '{gsub(/\//,"\\/");print}')
    
      for f in $(aws s3 ls $1 | awk 'NF>1{print $4}' | grep "zip\|json\|7z"); do
        aws s3 mv $(echo $f | sed "s/.*/$SNAPSHOT_PREFIX&/") $(echo $f | sed "s/.*/$ARCHIVE_PREFIX&/")
      done
    
      for f in $(aws s3 ls $2 | awk 'NF>1{print $4}' | grep "zip\|json\|7z"); do
        aws s3 mv $(echo $f | sed "s/.*/$TEMP_PREFIX&/") $(echo $f | sed "s/.*/$SNAPSHOT_PREFIX/")
      done
    
      if [[ $AWS_ENDPOINT_URL_S3 == *.r2.cloudflarestorage.com ]]; then
        return
      fi
    
      BUCKET="s3://9c-snapshots"
      BUCKET_PREFIX=$(echo $BUCKET | awk '{gsub(/\//,"\\/");print}')
      CF_PATH=$(echo $1 | sed -e "s/^$BUCKET_PREFIX//" | sed "s/.*/&*/")
    
      "$AWS" cloudfront create-invalidation --distribution-id "$CF_DISTRIBUTION_ID" --paths "$CF_PATH"
      "$AWS" cloudfront create-invalidation --distribution-id "$CF_DISTRIBUTION_ID" --paths "/main/temp/partition/*"
    }
    
    trap '' HUP
    
    replace_snapshot $1 $2
    
  upload_snapshot.sh: |- 
    #!/usr/bin/env bash
    set -ex
    
    apt-get -y update
    apt-get -y install curl
    apt-get -y install zip
    apt-get -y install unzip
    apt-get -y install sudo
    apt-get -y install p7zip
    
    uname=$(uname -r)
    arch=${uname##*.}
    if [ "$arch" = "aarch64" ]; then
      curl "https://awscli.amazonaws.com/awscli-exe-linux-aarch64-2.22.35.zip" -o "awscliv2.zip"
    else
      curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64-2.22.35.zip" -o "awscliv2.zip"
    fi
    unzip awscliv2.zip
    sudo ./aws/install
    
    HOME="/app"
    STORE_PATH="/data/headless"
    APP_PROTOCOL_VERSION=$2
    VERSION_NUMBER="${APP_PROTOCOL_VERSION:0:6}"
    SLACK_WEBHOOK=$3
    CF_DISTRIBUTION_ID=$4
    SNAPSHOT_PATH="$5/$1"
    
    export AWS_ENDPOINT_URL_S3="https://1cd1f38b21c0bfdde9501f7d8e43b663.r2.cloudflarestorage.com"
    export AWS_DEFAULT_REGION=auto
    
    function senderr() {
      echo "$1"
      curl -X POST -H 'Content-type: application/json' --data '{"text":"[K8S] '$1'. Check snapshot in 9c-main cluster at upload_snapshot.sh."}' $SLACK_WEBHOOK
    }
    
    function make_and_upload_snapshot() {
      SNAPSHOT="$HOME/NineChronicles.Snapshot"
      OUTPUT_DIR="/data/snapshots"
      PARTITION_DIR="/data/snapshots/partition"
      STATE_DIR="/data/snapshots/state"
      METADATA_DIR="/data/snapshots/metadata"
      URL="https://snapshots.nine-chronicles.com/$2/latest.json"
    
      mkdir -p "$OUTPUT_DIR" "$PARTITION_DIR" "$STATE_DIR" "$METADATA_DIR"
      if curl --output /dev/null --silent --head --fail "$URL"; then
        curl "$URL" -o "$METADATA_DIR/latest.json"
      else
        echo "URL does not exist: $URL"
      fi
    
      if ! "$SNAPSHOT" --output-directory "$OUTPUT_DIR" --store-path "$STORE_PATH"  --block-before 0 --apv "$1" --snapshot-type "partition"; then
        senderr "Snapshot creation failed." $1
        exit 1
      fi
    
      # shellcheck disable=SC2012
      LATEST_SNAPSHOT=$(ls -t $PARTITION_DIR/*.zip | head -1)
      # shellcheck disable=SC2012
      LATEST_METADATA=$(ls -t $METADATA_DIR/*.json | head -1)
      LATEST_SNAPSHOT_FILENAME=$(basename "$LATEST_SNAPSHOT")
      LATEST_METADATA_FILENAME=$(basename "$LATEST_METADATA")
      UPLOAD_FILENAME="latest"
      UPLOAD_SNAPSHOT_FILENAME="$UPLOAD_FILENAME.zip"
      UPLOAD_METADATA_FILENAME="$UPLOAD_FILENAME.json"
      SNAPSHOT_FILENAME=$(echo $LATEST_SNAPSHOT_FILENAME | cut -d'.' -f 1)
      # shellcheck disable=SC2012
      LATEST_STATE=$(ls -t $STATE_DIR/*.zip | head -1)
      LATEST_STATE_FILENAME=$(basename "$LATEST_STATE")
      STATE_FILENAME=$(echo $LATEST_STATE_FILENAME | cut -d'.' -f 1)
    
      S3_BUCKET_NAME="9c-snapshots"
      S3_LATEST_SNAPSHOT_PATH="$2/$UPLOAD_SNAPSHOT_FILENAME"
      S3_LATEST_METADATA_PATH="$2/$UPLOAD_METADATA_FILENAME"
    
      AWS="/usr/local/bin/aws"
      AWS_ACCESS_KEY_ID="$(cat "/secret/aws_access_key_id")"
      AWS_SECRET_ACCESS_KEY="$(cat "/secret/aws_secret_access_key")"
      "$AWS" configure set aws_access_key_id $AWS_ACCESS_KEY_ID
      "$AWS" configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
      "$AWS" configure set default.region us-east-2
      "$AWS" configure set default.output json
    
      "$AWS" s3 cp "$LATEST_SNAPSHOT" "s3://$S3_BUCKET_NAME/$2/$LATEST_SNAPSHOT_FILENAME" --quiet --acl public-read
      "$AWS" s3 cp "$LATEST_METADATA" "s3://$S3_BUCKET_NAME/$2/$LATEST_METADATA_FILENAME" --quiet --acl public-read
      "$AWS" s3 cp "$LATEST_STATE" "s3://$S3_BUCKET_NAME/$2/$LATEST_STATE_FILENAME" --quiet --acl public-read
      "$AWS" s3 cp "s3://$S3_BUCKET_NAME/$2/$LATEST_SNAPSHOT_FILENAME" "s3://$S3_BUCKET_NAME/$S3_LATEST_SNAPSHOT_PATH" --quiet --acl public-read --copy-props none --metadata-directive COPY
      "$AWS" s3 cp "s3://$S3_BUCKET_NAME/$2/$LATEST_METADATA_FILENAME" "s3://$S3_BUCKET_NAME/$S3_LATEST_METADATA_PATH" --quiet --acl public-read --copy-props none --metadata-directive COPY
    
      # "$AWS" cloudfront create-invalidation --distribution-id "$CF_DISTRIBUTION_ID" --paths "/$2/$SNAPSHOT_FILENAME.*"
      # "$AWS" cloudfront create-invalidation --distribution-id "$CF_DISTRIBUTION_ID" --paths "/$2/$UPLOAD_FILENAME.*"
      # "$AWS" cloudfront create-invalidation --distribution-id "$CF_DISTRIBUTION_ID" --paths "/$2/$STATE_FILENAME.*"
      
      mkdir -p "$PARTITION_DIR/partition-snapshot" "$STATE_DIR/state-snapshot"
      unzip -o "$LATEST_SNAPSHOT" -d "$PARTITION_DIR/partition-snapshot"
      unzip -o "$LATEST_STATE" -d "$STATE_DIR/state-snapshot"
    
      # Disable 7z snapshot
      # 7zr a -r "/data/snapshots/7z/partition/$SNAPSHOT_FILENAME.7z" "$PARTITION_DIR/partition-snapshot/*"
      # 7zr a -r "/data/snapshots/7z/partition/state_latest.7z" "$STATE_DIR/state-snapshot/*"
    
      # "$AWS" s3 cp "/data/snapshots/7z/partition/$SNAPSHOT_FILENAME.7z" "s3://$S3_BUCKET_NAME/$2/$SNAPSHOT_FILENAME.7z" --quiet --acl public-read
      # "$AWS" s3 cp "s3://$S3_BUCKET_NAME/main/partition/$SNAPSHOT_FILENAME.7z" "s3://$S3_BUCKET_NAME/$2/latest.7z" --quiet --acl public-read --copy-props none --metadata-directive COPY
      # "$AWS" s3 cp "/data/snapshots/7z/partition/state_latest.7z" "s3://$S3_BUCKET_NAME/$2/state_latest.7z" --quiet --acl public-read
    
      # "$AWS" cloudfront create-invalidation --distribution-id "$CF_DISTRIBUTION_ID" --paths "/$2/$SNAPSHOT_FILENAME.*"
      # "$AWS" cloudfront create-invalidation --distribution-id "$CF_DISTRIBUTION_ID" --paths "/$2/$UPLOAD_FILENAME.*"
      # "$AWS" cloudfront create-invalidation --distribution-id "$CF_DISTRIBUTION_ID" --paths "/$2/$STATE_FILENAME.*"
    
      rm "$LATEST_SNAPSHOT"
      rm "$LATEST_STATE"
      # rm "/data/snapshots/7z/partition/$SNAPSHOT_FILENAME.7z"
      # rm "/data/snapshots/7z/partition/state_latest.7z"
      rm -r "$PARTITION_DIR/partition-snapshot"
      rm -r "$STATE_DIR/state-snapshot"
      rm -r "$METADATA_DIR"
    }
    
    trap '' HUP
    
    make_and_upload_snapshot "$APP_PROTOCOL_VERSION" "$SNAPSHOT_PATH"
---
# Source: 9c-network/templates/configmap-partition.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: heimdall-snapshot-script-partition
  namespace: heimdall
  labels:
    app.kubernetes.io/instance: heimdall
data:
  preload_headless.sh: |- 
    #!/usr/bin/env bash
    set -ex
    
    apt-get -y update
    apt-get -y install zip
    apt-get -y install curl
    HOME="/app"
    
    APP_PROTOCOL_VERSION=$1
    SLACK_WEBHOOK=$2
    VERSION_NUMBER="${APP_PROTOCOL_VERSION:0:6}"
    GENESIS_BLOCK_PATH="https://planets.nine-chronicles.com/planets/0x000000000001/genesis"
    STORE_PATH="/data/headless"
    TRUSTED_APP_PROTOCOL_VERSION_SIGNER="031c5b9cb11b1cc07f8530599fa32338967e41cb364cca552a34ad2157ccb237bf"
    SEED1="03380b4ba8722057c9b4d8594f8de9481eb296aba4b3c168666f57b17596452ae7,heimdall-seed-1.nine-chronicles.com,31234"
    
    ICE_SERVER="turn://0ed3e48007413e7c2e638f13ddd75ad272c6c507e081bd76a75e4b7adc86c9af:0apejou+ycZFfwtREeXFKdfLj2gCclKzz5ZJ49Cmy6I=@turn-us.planetarium.dev:3478"
    
    HEADLESS="$HOME/NineChronicles.Headless.Executable"
    HEADLESS_LOG_NAME="headless_$(date -u +"%Y%m%d%H%M").log"
    HEADLESS_LOG_DIR="/data/snapshot_logs"
    HEADLESS_LOG="$HEADLESS_LOG_DIR/$HEADLESS_LOG_NAME"
    mkdir -p "$HEADLESS_LOG_DIR"
    
    PID_FILE="$HOME/headless_pid"
    function senderr() {
      echo "$1"
      curl -X POST -H 'Content-type: application/json' --data '{"text":"[K8S] '$1'. Check snapshot-partition-v'$VERSION_NUMBER' in 9c-main cluster at preload_headless.sh."}' $SLACK_WEBHOOK
    }
    
    function preload_complete() {
      echo "$1"
    }
    
    function waitpid() {
      PID="$1"
      while [ -e "/proc/$PID" ]; do
        sleep 1
      done
    }
    
    function run_headless() {
      if [ ! -d "$STORE_PATH" ]; then
        mkdir -p "$STORE_PATH"
      fi
    
      chmod 777 -R "$STORE_PATH"
    
      "$HEADLESS" \
          --no-miner \
          --genesis-block-path="$GENESIS_BLOCK_PATH" \
          --store-type=rocksdb \
          --store-path="$STORE_PATH" \
          --app-protocol-version="$APP_PROTOCOL_VERSION" \
          --trusted-app-protocol-version-signer="$TRUSTED_APP_PROTOCOL_VERSION_SIGNER" \
          --ice-server="$ICE_SERVER" \
          --planet=Heimdall \
          --config=https://9c-cluster-config.s3.us-east-2.amazonaws.com/9c-main/heimdall/appsettings-nodeinfra.json \
          --peer "$SEED1" \
          --network-type=Default \
          > "$HEADLESS_LOG" 2>&1 &
    
      PID="$!"
    
      echo "$PID" | tee "$PID_FILE"
    
      if ! kill -0 "$PID"; then
        senderr "$PID doesn't exist. Failed to run headless" $1
        exit 1
      fi
    }
    
    function wait_preloading() {
      touch "$PID_FILE"
      PID="$(cat "$PID_FILE")"
    
      if ! kill -0 "$PID"; then
        senderr "$PID doesn't exist. Failed to run headless" $1
        exit 1
      fi
    
      if timeout 144000 tail -f "$HEADLESS_LOG" | grep -m1 "preloading is no longer needed"; then
        sleep 60
      else
        senderr "grep failed. Failed to preload." $1
        kill "$PID"
        exit 1
      fi
    }
    
    
    function kill_headless() {
      touch "$PID_FILE"
      PID="$(cat "$PID_FILE")"
      if ! kill -0 "$PID"; then
        echo "$PID doesn't exist. Failed to kill headless"
      else
        kill "$PID"; sleep 60; kill -9 "$PID" || true
        waitpid "$PID" || true
        chmod 777 -R "$STORE_PATH"
      fi
    }
    
    function rotate_log() {
      cd "$HEADLESS_LOG_DIR"
      if ./*"$(date -d 'yesterday' -u +'%Y%m%d')"*.log; then
        zip "$(date -d 'yesterday' -u +'%Y%m%d')".zip ./*"$(date -d 'yesterday' -u +'%Y%m%d')"*.log
        rm ./*"$(date -d 'yesterday' -u +'%Y%m%d')"*.log
      fi
    }
    trap '' HUP
    
    run_headless
    wait_preloading
    preload_complete "Preloading completed"
    kill_headless
    rotate_log
    
  upload_snapshot.sh: |- 
    #!/usr/bin/env bash
    set -ex
    
    apt-get -y update
    apt-get -y install curl
    apt-get -y install zip
    apt-get -y install unzip
    apt-get -y install sudo
    apt-get -y install p7zip
    
    uname=$(uname -r)
    arch=${uname##*.}
    if [ "$arch" = "aarch64" ]; then
      curl "https://awscli.amazonaws.com/awscli-exe-linux-aarch64-2.22.35.zip" -o "awscliv2.zip"
    else
      curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64-2.22.35.zip" -o "awscliv2.zip"
    fi
    unzip awscliv2.zip
    sudo ./aws/install
    
    HOME="/app"
    STORE_PATH="/data/headless"
    APP_PROTOCOL_VERSION=$1
    VERSION_NUMBER="${APP_PROTOCOL_VERSION:0:6}"
    SLACK_WEBHOOK=$2
    CF_DISTRIBUTION_ID=$3
    SNAPSHOT_PATH=$4
    
    export AWS_ENDPOINT_URL_S3="https://1cd1f38b21c0bfdde9501f7d8e43b663.r2.cloudflarestorage.com"
    export AWS_DEFAULT_REGION=auto
    
    function senderr() {
      echo "$1"
      curl -X POST -H 'Content-type: application/json' --data '{"text":"[K8S] '$1'. Check snapshot in 9c-main cluster at upload_snapshot.sh."}' $SLACK_WEBHOOK
    }
    
    function make_and_upload_snapshot() {
      SNAPSHOT="$HOME/NineChronicles.Snapshot"
      OUTPUT_DIR="/data/snapshots"
      PARTITION_DIR="/data/snapshots/partition"
      STATE_DIR="/data/snapshots/state"
      METADATA_DIR="/data/snapshots/metadata"
      FULL_DIR="/data/snapshots/full"
      URL="https://snapshots.nine-chronicles.com/main/heimdall/partition/latest.json"
    
      mkdir -p "$OUTPUT_DIR" "$PARTITION_DIR" "$STATE_DIR" "$METADATA_DIR"
      if curl --output /dev/null --silent --head --fail "$URL"; then
        curl "$URL" -o "$METADATA_DIR/latest.json"
      else
        echo "URL does not exist: $URL"
      fi
    
      if ! "$SNAPSHOT" --output-directory "$OUTPUT_DIR" --store-path "$STORE_PATH"  --block-before 0 --apv "$1" --snapshot-type "partition"; then
        senderr "Snapshot creation failed." "$SLACK_WEBHOOK"
        exit 1
      fi
    
      # shellcheck disable=SC2012
      LATEST_SNAPSHOT=$(ls -t $PARTITION_DIR/*.zip | head -1)
      # shellcheck disable=SC2012
      LATEST_METADATA=$(ls -t $METADATA_DIR/*.json | head -1)
      LATEST_SNAPSHOT_FILENAME=$(basename "$LATEST_SNAPSHOT")
      LATEST_METADATA_FILENAME=$(basename "$LATEST_METADATA")
      UPLOAD_FILENAME="latest"
      UPLOAD_SNAPSHOT_FILENAME="$UPLOAD_FILENAME.zip"
      UPLOAD_METADATA_FILENAME="$UPLOAD_FILENAME.json"
      SNAPSHOT_FILENAME=$(echo $LATEST_SNAPSHOT_FILENAME | cut -d'.' -f 1)
      # shellcheck disable=SC2012
      LATEST_STATE=$(ls -t $STATE_DIR/*.zip | head -1)
      LATEST_STATE_FILENAME=$(basename "$LATEST_STATE")
      STATE_FILENAME=$(echo $LATEST_STATE_FILENAME | cut -d'.' -f 1)
    
      S3_BUCKET_NAME="9c-snapshots"
      S3_LATEST_SNAPSHOT_PATH="main/heimdall/partition/$UPLOAD_SNAPSHOT_FILENAME"
      S3_LATEST_METADATA_PATH="main/heimdall/partition/$UPLOAD_METADATA_FILENAME"
      S3_LATEST_INTERNAL_SNAPSHOT_PATH="main/heimdall/partition/internal/$UPLOAD_SNAPSHOT_FILENAME"
      S3_LATEST_INTERNAL_METADATA_PATH="main/heimdall/partition/internal/$UPLOAD_METADATA_FILENAME"
    
      AWS="/usr/local/bin/aws"
      AWS_ACCESS_KEY_ID="$(cat "/secret/aws_access_key_id")"
      AWS_SECRET_ACCESS_KEY="$(cat "/secret/aws_secret_access_key")"
      "$AWS" configure set aws_access_key_id $AWS_ACCESS_KEY_ID
      "$AWS" configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
      "$AWS" configure set default.region us-east-2
      "$AWS" configure set default.output json
      NOW=$(date '+%Y%m%d%H%M%S')
    
      "$AWS" s3 cp "$LATEST_SNAPSHOT" "s3://$S3_BUCKET_NAME/main/heimdall/partition/$LATEST_SNAPSHOT_FILENAME" --quiet --acl public-read
      "$AWS" s3 cp "$LATEST_METADATA" "s3://$S3_BUCKET_NAME/main/heimdall/partition/$LATEST_METADATA_FILENAME" --quiet --acl public-read
      "$AWS" s3 cp "$LATEST_STATE" "s3://$S3_BUCKET_NAME/main/heimdall/partition/$LATEST_STATE_FILENAME" --quiet --acl public-read
      "$AWS" s3 cp "s3://$S3_BUCKET_NAME/main/heimdall/partition/$LATEST_SNAPSHOT_FILENAME" "s3://$S3_BUCKET_NAME/main/heimdall/partition/archive/snapshots/${NOW}_$LATEST_SNAPSHOT_FILENAME" --quiet --acl public-read --copy-props none --metadata-directive COPY
      "$AWS" s3 cp "s3://$S3_BUCKET_NAME/main/heimdall/partition/$LATEST_METADATA_FILENAME" "s3://$S3_BUCKET_NAME/main/heimdall/partition/archive/metadata/${NOW}_$LATEST_METADATA_FILENAME" --quiet --acl public-read --copy-props none --metadata-directive COPY
      "$AWS" s3 cp "s3://$S3_BUCKET_NAME/main/heimdall/partition/$LATEST_STATE_FILENAME" "s3://$S3_BUCKET_NAME/main/heimdall/partition/archive/states/${NOW}_$LATEST_STATE_FILENAME" --quiet --acl public-read --copy-props none --metadata-directive COPY
    
      "$AWS" s3 cp "s3://$S3_BUCKET_NAME/main/heimdall/partition/$LATEST_SNAPSHOT_FILENAME" "s3://$S3_BUCKET_NAME/$S3_LATEST_SNAPSHOT_PATH" --quiet --acl public-read --copy-props none --metadata-directive COPY
      "$AWS" s3 cp "s3://$S3_BUCKET_NAME/main/heimdall/partition/$LATEST_METADATA_FILENAME" "s3://$S3_BUCKET_NAME/$S3_LATEST_METADATA_PATH" --quiet --acl public-read --copy-props none --metadata-directive COPY
    
      invalidate_cf "/main/heimdall/partition/$SNAPSHOT_FILENAME.*"
      invalidate_cf "/main/heimdall/partition/$UPLOAD_FILENAME.*"
      invalidate_cf "/main/heimdall/partition/$STATE_FILENAME.*"
      "$AWS" s3 cp "s3://$S3_BUCKET_NAME/main/heimdall/partition/$LATEST_SNAPSHOT_FILENAME" "s3://$S3_BUCKET_NAME/main/heimdall/partition/internal/$LATEST_SNAPSHOT_FILENAME" --quiet --acl public-read --copy-props none --metadata-directive COPY
      "$AWS" s3 cp "s3://$S3_BUCKET_NAME/main/heimdall/partition/$LATEST_METADATA_FILENAME" "s3://$S3_BUCKET_NAME/main/heimdall/partition/internal/$LATEST_METADATA_FILENAME" --quiet --acl public-read --copy-props none --metadata-directive COPY
      "$AWS" s3 cp "s3://$S3_BUCKET_NAME/main/heimdall/partition/$LATEST_STATE_FILENAME" "s3://$S3_BUCKET_NAME/main/heimdall/partition/internal/$LATEST_STATE_FILENAME" --quiet --acl public-read --copy-props none --metadata-directive COPY
      "$AWS" s3 cp "s3://$S3_BUCKET_NAME/main/heimdall/partition/internal/$LATEST_SNAPSHOT_FILENAME" "s3://$S3_BUCKET_NAME/$S3_LATEST_INTERNAL_SNAPSHOT_PATH" --quiet --acl public-read --copy-props none --metadata-directive COPY
      "$AWS" s3 cp "s3://$S3_BUCKET_NAME/main/heimdall/partition/internal/$LATEST_METADATA_FILENAME" "s3://$S3_BUCKET_NAME/$S3_LATEST_INTERNAL_METADATA_PATH" --quiet --acl public-read --copy-props none --metadata-directive COPY
    
      invalidate_cf "/main/heimdall/partition/internal/$SNAPSHOT_FILENAME.*"
      invalidate_cf "/main/heimdall/partition/internal/$UPLOAD_FILENAME.*"
      invalidate_cf "/main/heimdall/partition/internal/$STATE_FILENAME.*"
    
      mkdir -p "$PARTITION_DIR/partition-snapshot" "$STATE_DIR/state-snapshot"
      unzip -o "$LATEST_SNAPSHOT" -d "$PARTITION_DIR/partition-snapshot"
      unzip -o "$LATEST_STATE" -d "$STATE_DIR/state-snapshot"
    
      # Disable 7z snapshot
      # 7zr a -r "/data/snapshots/7z/partition/$SNAPSHOT_FILENAME.7z" "$PARTITION_DIR/partition-snapshot/*"
      # 7zr a -r "/data/snapshots/7z/partition/state_latest.7z" "$STATE_DIR/state-snapshot/*"
    
      # "$AWS" s3 cp "/data/snapshots/7z/partition/$SNAPSHOT_FILENAME.7z" "s3://$S3_BUCKET_NAME/main/heimdall/partition/$SNAPSHOT_FILENAME.7z" --quiet --acl public-read
      # "$AWS" s3 cp "s3://$S3_BUCKET_NAME/main/heimdall/partition/$SNAPSHOT_FILENAME.7z" "s3://$S3_BUCKET_NAME/main/heimdall/partition/latest.7z" --quiet --acl public-read --copy-props none --metadata-directive COPY
      # "$AWS" s3 cp "/data/snapshots/7z/partition/state_latest.7z" "s3://$S3_BUCKET_NAME/main/heimdall/partition/state_latest.7z" --quiet --acl public-read
    
      invalidate_cf "/main/heimdall/partition/$SNAPSHOT_FILENAME.*"
      invalidate_cf "/main/heimdall/partition/$UPLOAD_FILENAME.*"
      invalidate_cf "/main/heimdall/partition/$STATE_FILENAME.*"
    
      # rm "/data/snapshots/7z/partition/$SNAPSHOT_FILENAME.7z"
      # rm "/data/snapshots/7z/partition/state_latest.7z"
      rm -r "$PARTITION_DIR/partition-snapshot"
      rm -r "$STATE_DIR/state-snapshot"
    
      rm "$LATEST_SNAPSHOT"
      rm "$LATEST_STATE"
      rm -r "$METADATA_DIR"
    }
    
    function invalidate_cf() {
      if [[ $AWS_ENDPOINT_URL_S3 == *.r2.cloudflarestorage.com ]]; then
        return
      fi
    
      if "$AWS" cloudfront create-invalidation --distribution-id "$CF_DISTRIBUTION_ID" --paths "$1"; then
        echo "CF invalidation successful"
      else
        echo "CF invalidation failed. Trying again."
        invalidate_cf "$1"
      fi
    }
    
    trap '' HUP
    
    make_and_upload_snapshot "$APP_PROTOCOL_VERSION" "$SNAPSHOT_PATH"
    
  preload_dp_migrator.sh: |-
---
# Source: 9c-network/templates/configmap-probe.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: heimdall-probe-script
  namespace: heimdall
  labels:
    app.kubernetes.io/instance: heimdall
data:
  liveness_probe.sh: |- 
    #!/usr/bin/env bash
    set -ex
    
    preloaded="$(
      curl \
        -H 'Content-Type: application/json' \
        --data '{"query":"query{nodeStatus{preloadEnded}}"}' \
        http://localhost:80/graphql \
      | jq .data.nodeStatus.preloadEnded
    )"
    
    echo $preloaded
    if [[ "$preloaded" = "true" ]]; then
      echo "Preload finished. Check chain tip."
      local_tip="$(
        curl \
          -H 'Content-Type: application/json' \
          --data '{"query":"query{chainQuery{blockQuery{blocks(desc:true,limit:1){index}}}}"}' \
          http://localhost:80/graphql \
        | jq -r '.data.chainQuery.blockQuery.blocks[0].index'
      )"
      echo $local_tip
      miner_tip="$(
        curl \
          -H 'Content-Type: application/json' \
          --data '{"query":"query{chainQuery{blockQuery{blocks(desc:true,limit:1){index}}}}"}' \
          heimdall-validator-1.nine-chronicles.com/graphql \
        | jq -r '.data.chainQuery.blockQuery.blocks[0].index'
      )"
      echo $miner_tip
      echo [[ $(( miner_tip - local_tip)) -lt 5 ]]
      [[ $(( miner_tip - local_tip)) -lt 5 ]]
    fi
    
  liveness_probe_jwt.sh: |- 
    #!/usr/bin/env bash
    set -ex
    
    if [ -z "$JWT_TOKEN" ]; then
      echo "Token not provided"
      exit 1
    else
      preloaded="$(
        curl \
          -H 'Content-Type: application/json' \
          -H "Authorization: Bearer $JWT_TOKEN" \
          --data '{"query":"query{nodeStatus{preloadEnded}}"}' \
          http://localhost:80/graphql \
        | jq .data.nodeStatus.preloadEnded
      )"
    
      echo $preloaded
      if [[ "$preloaded" = "true" ]]; then
        echo "Preload finished. Check chain tip."
        local_tip="$(
          curl \
            -H 'Content-Type: application/json' \
            --data '{"query":"query{chainQuery{blockQuery{blocks(desc:true,limit:1){index}}}}"}' \
            -H "Authorization: Bearer $JWT_TOKEN" \
            http://localhost:80/graphql \
          | jq -r '.data.chainQuery.blockQuery.blocks[0].index'
        )"
        echo $local_tip
        miner_tip="$(
          curl \
            -H 'Content-Type: application/json' \
            --data '{"query":"query{chainQuery{blockQuery{blocks(desc:true,limit:1){index}}}}"}' \
            heimdall-validator-1.nine-chronicles.com/graphql \
          | jq -r '.data.chainQuery.blockQuery.blocks[0].index'
        )"
        echo $miner_tip
        echo [[ $(( miner_tip - local_tip)) -lt 5 ]]
        [[ $(( miner_tip - local_tip)) -lt 5 ]]
      fi
    fi
    
  liveness_probe_validator.sh: |- 
    #!/usr/bin/env bash
    set -ex
    
    stagedTxIdsCount="$(
      curl \
      -H 'Content-Type: application/json' \
      --data '{"query":"query{nodeStatus{stagedTxIds}}"}' \
      http://localhost:80/graphql | jq .data.nodeStatus | jq '.stagedTxIds | length'
    )"
    
    if [[ $(( stagedTxIdsCount )) -gt 0 ]]; then
      last_block="$(
        curl \
        -H 'Content-Type: application/json' \
        --data '{"query":"query{chainQuery{blockQuery{blocks(desc:true,limit:1){timestamp}}}}"}' \
        http://localhost:80/graphql | jq -r '.data.chainQuery.blockQuery.blocks[0].timestamp')"
      last_timestamp="$(date +%s -u --date="$last_block")"
      now="$(date +%s)"
      [[ $(( now - last_timestamp )) -lt 60 ]]
    else
      sleep 5
      newStagedTxIdsCount="$(
      curl \
      -H 'Content-Type: application/json' \
      --data '{"query":"query{nodeStatus{stagedTxIds}}"}' \
      http://localhost:80/graphql | jq .data.nodeStatus | jq '.stagedTxIds | length'
      )"
      [[ $(( newStagedTxIdsCount )) -gt 0 ]]
    fi
    
  readiness_probe.sh: |- 
    #!/usr/bin/env bash
    set -ex
    
    preloaded="$(
      curl \
        -H 'Content-Type: application/json' \
        --data '{"query":"query{nodeStatus{preloadEnded}}"}' \
        http://localhost:80/graphql \
      | jq .data.nodeStatus.preloadEnded
    )"
    [[ "$preloaded" = "true" ]]
    
  readiness_probe_jwt.sh: |- 
    #!/usr/bin/env bash
    set -ex
    
    if [ -z "$JWT_TOKEN" ]; then
      echo "Token not provided"
      exit 1
    else
      preloaded="$(
        curl \
          -H 'Content-Type: application/json' \
          -H "Authorization: Bearer $JWT_TOKEN" \
          --data '{"query":"query{nodeStatus{preloadEnded}}"}' \
          http://localhost:80/graphql \
        | jq .data.nodeStatus.preloadEnded
      )"
      [[ "$preloaded" = "true" ]]
    fi
---
# Source: 9c-network/templates/storageclass-longhorn.yaml
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: heimdall-longhorn
  labels:
    app.kubernetes.io/instance: heimdall
parameters:
  fromBackup: ''
  fsType: ext4
  numberOfReplicas: '1'
  staleReplicaTimeout: '2880'
  nodeSelector: heimdall
provisioner: driver.longhorn.io
reclaimPolicy: Retain
allowVolumeExpansion: true
---
# Source: 9c-network/templates/dp-user-migrator.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: dp-user-migrator-volume
  namespace: heimdall
  labels:
    app.kubernetes.io/instance: heimdall
  annotations:
    volume.beta.kubernetes.io/storage-provisioner: ebs.csi.aws.com
    volume.kubernetes.io/storage-provisioner: ebs.csi.aws.com
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 300Gi
  storageClassName: heimdall-gp3
  volumeMode: Filesystem
---
# Source: 9c-network/templates/snapshot-volume.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: snapshot-volume-partition
  namespace: heimdall
  labels:
    app.kubernetes.io/instance: heimdall
  annotations:
    volume.beta.kubernetes.io/storage-provisioner: ebs.csi.aws.com
    volume.kubernetes.io/storage-provisioner: ebs.csi.aws.com
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 300Gi
  storageClassName: heimdall-gp3
  volumeMode: Filesystem
---
# Source: 9c-network/templates/snapshot-volume.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: snapshot-volume-full
  namespace: heimdall
  labels:
    app.kubernetes.io/instance: heimdall
  annotations:
    volume.beta.kubernetes.io/storage-provisioner: ebs.csi.aws.com
    volume.kubernetes.io/storage-provisioner: ebs.csi.aws.com
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 300Gi
  storageClassName: heimdall-gp3
  volumeMode: Filesystem
---
# Source: 9c-network/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: tcp-seed-1
  namespace: heimdall
  labels:
    app.kubernetes.io/instance: heimdall
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-target-group-attributes: stickiness.enabled=true,stickiness.type=source_ip,preserve_client_ip.enabled=true
    service.beta.kubernetes.io/aws-load-balancer-additional-resource-tags: Environment=development,Team=game,Owner=jihyung,Service=heimdall,Name=tcp-seed-1
    external-dns.alpha.kubernetes.io/hostname: heimdall-seed-1.nine-chronicles.com
    external-dns.alpha.kubernetes.io/ttl: '60'
spec:
  type: ClusterIP
  ports:
  - port: 31234
    targetPort: 31234
    name: node
  - port: 31237
    targetPort: 31237
    name: graphql
  - port: 443
    targetPort: 31237
    name: https
  - port: 31235
    targetPort: 31235
    name: gossip
  selector:
    app: tcp-seed-1
---
# Source: 9c-network/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: remote-headless-1
  namespace: heimdall
  labels:
    app.kubernetes.io/instance: heimdall
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-target-group-attributes: stickiness.enabled=true,stickiness.type=source_ip,preserve_client_ip.enabled=true
    service.beta.kubernetes.io/aws-load-balancer-additional-resource-tags: Environment=development,Team=game,Owner=jihyung,Service=heimdall,Name=remote-headless-1
    external-dns.alpha.kubernetes.io/hostname: heimdall-rke2-rpc-1.nine-chronicles.com
    external-dns.alpha.kubernetes.io/ttl: '60'
spec:
  type: LoadBalancer
  loadBalancerIP: 49.247.4.178
  externalTrafficPolicy: Local
  ports:
  - name: graphql
    port: 80
    targetPort: 80
  - name: rpc
    port: 31238
    targetPort: 31238
  - name: headless
    port: 31234
    targetPort: 31234
  - name: https
    port: 443
    targetPort: 80
  selector:
    app: remote-headless-1
---
# Source: 9c-network/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: remote-headless-2
  namespace: heimdall
  labels:
    app.kubernetes.io/instance: heimdall
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-target-group-attributes: stickiness.enabled=true,stickiness.type=source_ip,preserve_client_ip.enabled=true
    service.beta.kubernetes.io/aws-load-balancer-additional-resource-tags: Environment=development,Team=game,Owner=jihyung,Service=heimdall,Name=remote-headless-2
    external-dns.alpha.kubernetes.io/hostname: heimdall-rke2-rpc-2.nine-chronicles.com
    external-dns.alpha.kubernetes.io/ttl: '60'
spec:
  type: LoadBalancer
  loadBalancerIP: 49.247.4.184
  externalTrafficPolicy: Local
  ports:
  - name: graphql
    port: 80
    targetPort: 80
  - name: rpc
    port: 31238
    targetPort: 31238
  - name: headless
    port: 31234
    targetPort: 31234
  - name: https
    port: 443
    targetPort: 80
  selector:
    app: remote-headless-2
---
# Source: 9c-network/templates/service.yaml
---

apiVersion: v1
kind: Service
metadata:
  name: data-provider
  namespace: heimdall
  labels:
    app.kubernetes.io/instance: heimdall
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-additional-resource-tags: Environment=development,Team=game,Owner=kidon,Service=heimdall,Name=data-provider
spec:
  ports:
  - name: graphql
    port: 80
    targetPort: 80
  selector:
    app: data-provider
  type: LoadBalancer
---
# Source: 9c-network/templates/service.yaml
---





apiVersion: v1
kind: Service
metadata:
  name: test-headless-1
  namespace: heimdall
  labels:
    app.kubernetes.io/instance: heimdall
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-target-group-attributes: stickiness.enabled=true,stickiness.type=source_ip,preserve_client_ip.enabled=true
    service.beta.kubernetes.io/aws-load-balancer-additional-resource-tags: Environment=development,Team=game,Owner=jihyung,Service=heimdall,Name=test-headless-1
    external-dns.alpha.kubernetes.io/hostname: heimdall-rke2-test-1.nine-chronicles.com
    external-dns.alpha.kubernetes.io/ttl: '60'
spec:
  externalTrafficPolicy: Local
  ports:
  - name: graphql
    port: 80
    targetPort: 80
  - name: rpc
    port: 31238
    targetPort: 31238
  - name: headless
    port: 31234
    targetPort: 31234
  - name: https
    port: 443
    targetPort: 80
  - name: libplanet-remote-kv-rpc
    port: 5000
    targetPort: 5000
  - name: libplanet-remote-kv-http
    port: 5001
    targetPort: 5001
  selector:
    app: test-headless-1
  type: LoadBalancer
---
# Source: 9c-network/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: jwt-headless
  namespace: heimdall
  labels:
    app.kubernetes.io/instance: heimdall
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-target-group-attributes: stickiness.enabled=true,stickiness.type=source_ip,preserve_client_ip.enabled=true
    service.beta.kubernetes.io/aws-load-balancer-additional-resource-tags: Environment=development,Team=game,Owner=jihyung,Service=heimdall,Name=jwt-headless
    external-dns.alpha.kubernetes.io/hostname: heimdall-rke2-jwt-rpc.nine-chronicles.com
    external-dns.alpha.kubernetes.io/ttl: '60'
spec:
  type: ClusterIP
  ports:
  - name: graphql
    port: 80
    targetPort: 80
  - name: rpc
    port: 31238
    targetPort: 31238
  - name: headless
    port: 31234
    targetPort: 31234
  - name: https
    port: 443
    targetPort: 80
  selector:
    app: jwt-headless
---
# Source: 9c-network/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/instance: heimdall
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-additional-resource-tags: Environment=development,Team=game,Owner=jihyung,Service=heimdall,Name=world-boss-service
  name: world-boss-service
  namespace: heimdall
spec:
  externalTrafficPolicy: Cluster
  internalTrafficPolicy: Cluster
  ipFamilies:
  - IPv4
  ipFamilyPolicy: SingleStack
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: 5000
  - name: https
    port: 443
    protocol: TCP
    targetPort: 5000
  selector:
    app: world-boss-service
  type: LoadBalancer
---
# Source: 9c-network/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: market-service
  namespace: heimdall
  labels:
    app.kubernetes.io/instance: heimdall
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-additional-resource-tags: Environment=development,Team=game,Owner=jihyung,Service=heimdall,Name=market-service
spec:
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: 80
    - name: https
      port: 443
      protocol: TCP
      targetPort: 80
  selector:
    app: market-service
  type: LoadBalancer
---
# Source: 9c-network/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: validator-5
  namespace: heimdall
  labels:
    app.kubernetes.io/instance: heimdall
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-target-group-attributes: stickiness.enabled=true,stickiness.type=source_ip,preserve_client_ip.enabled=true
    service.beta.kubernetes.io/aws-load-balancer-additional-resource-tags: Environment=development,Team=game,Owner=jihyung,Service=heimdall,Name=validator-5
    external-dns.alpha.kubernetes.io/hostname: heimdall-rke2-validator-1-rpc.nine-chronicles.com
    external-dns.alpha.kubernetes.io/ttl: '60'
spec:
  ports:
  - port: 31234
    targetPort: 31234
    name: headless
  - port: 80
    targetPort: 80
    name: gql
  - port: 6000
    targetPort: 6000
    name: gossip
  - port: 443
    targetPort: 80
    name: https
    protocol: TCP
  selector:
    app: validator-5
  type: LoadBalancer
  externalTrafficPolicy: Local
  loadBalancerIP: 49.247.14.80
---
# Source: 9c-network/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: arena-service
  namespace: heimdall
  labels:
    app.kubernetes.io/instance: heimdall
spec:
  ports:
    - name: "80"
      port: 80
      targetPort: 8080
  selector:
    app: arena-service
  type: ClusterIP
---
# Source: 9c-network/templates/arena-service.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: arena-service
    app.kubernetes.io/instance: heimdall
  name: arena-service
  namespace: heimdall
spec:
  replicas: 1
  selector:
    matchLabels:
      app: arena-service
  template:
    metadata:
      labels:
        app: arena-service
    spec:
      containers:
        - name: arena-service
          image: planetariumhq/arena-service:git-f82d1ee886299627c4908934fb2f86bb0606e504
          ports:
            - containerPort: 8080
          env:
            - name: ConnectionStrings__DefaultConnection
              valueFrom:
                secretKeyRef:
                  name: arena
                  key: POSTGRES_CONNECTION_STRING
            - name: Redis__Port
              value: "6379"
            - name: Redis__HangfireDbNumber
              value: "2"
            - name: Redis__RankingDbNumber
              value: "3"
            - name: Redis__Host
              valueFrom:
                secretKeyRef:
                  name: arena
                  key: REDIS_HOST
            - name: Redis__Password
              valueFrom:
                secretKeyRef:
                  name: arena
                  key: REDIS_PASSWORD
            - name: Headless__JwtSecretKey
              valueFrom:
                secretKeyRef:
                  name: arena
                  key: HEADLESS_JWT_SECRET_KEY
            - name: Headless__JwtIssuer
              valueFrom:
                secretKeyRef:
                  name: arena
                  key: HEADLESS_JWT_ISSUER
            - name: Headless__HeadlessEndpoint
              valueFrom:
                secretKeyRef:
                  name: arena
                  key: HEADLESS_ENDPOINT
            - name: OpsConfig__RecipientAddress
              value: 0x6EC1Fd2c95C409747CAE6F836182666F8EC31C9C
            - name: OpsConfig__ArenaProviderName
              value: "PLANETARIUM"
            - name: OpsConfig__JwtSecretKey
              valueFrom:
                secretKeyRef:
                  name: arena
                  key: JWT_SECRET_KEY
            - name: OpsConfig__JwtPublicKey
              valueFrom:
                secretKeyRef:
                  name: arena
                  key: JWT_PUBLIC_KEY
            - name: OpsConfig__HangfireUsername
              valueFrom:
                secretKeyRef:
                  name: arena
                  key: HANGFIRE_USER_NAME
            - name: OpsConfig__HangfirePassword
              valueFrom:
                secretKeyRef:
                  name: arena
                  key: HANGFIRE_PASSWORD
            - name: Ssh__Enabled
              value: "true"
            - name: Ssh__Host
              valueFrom:
                secretKeyRef:
                  name: arena
                  key: SSH_HOST
            - name: Ssh__Username
              valueFrom:
                secretKeyRef:
                  name: arena
                  key: SSH_USERNAME
            - name: Ssh__Password
              valueFrom:
                secretKeyRef:
                  name: arena
                  key: SSH_PASSWORD
      restartPolicy: Always
      nodeSelector:
        node.kubernetes.io/network: odin
        node.kubernetes.io/node-index: "4"
  strategy:
    type: RollingUpdate
---
# Source: 9c-network/templates/seed.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: tcp-seed-1
    app.kubernetes.io/instance: heimdall
  name: tcp-seed-1
  namespace: heimdall
spec:
  replicas: 1
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app: tcp-seed-1
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: tcp-seed-1
      name: tcp-seed-1
    spec:
      containers:
      - args:
        - Libplanet.Seed.Executable.dll
        - run
        - --log-level=debug
        - --app-protocol-version=200290/eE394bb942fa7c2d807C170C7Db7F26cb3EA037F/MEUCIQDtmXbXy9seYISvIxPbu1K5JH4yfar91pA+5qixFPp3BAIgCVAjBmO.6xBEUeyt6ezYgytsmngnI8SYKgS4GQF0jaw=/ZHU5OnRpbWVzdGFtcHUxMDoyMDI1LTAzLTEwZQ==
        - --host=heimdall-seed-1.nine-chronicles.com
        - --port=31234
        - --private-key=$(PRIVATE_KEY)
        - --graphql-host=0.0.0.0
        - --graphql-port=31237
        - --workers=1000
        - --gossip-port=31235
        command:
        - dotnet
        env:
          - name: PRIVATE_KEY
            valueFrom:
              secretKeyRef:
                key: seed-private-key-1
                name: private-keys
        image: "planetariumhq/libplanet-seed:git-67d0ef91c52a71a9772cd7fdb241c9fc37b165b8"
        imagePullPolicy: Always
        livenessProbe:
          initialDelaySeconds: 120
          periodSeconds: 5
          successThreshold: 1
          tcpSocket:
            port: 31234
          timeoutSeconds: 1
        name: tcp-seed-1
        ports:
          - containerPort: 31234
            name: node
            protocol: TCP
          - containerPort: 31237
            name: graphql
            protocol: TCP
          - containerPort: 31235
            name: gossip
            protocol: TCP
        resources:
          requests:
            cpu: 500m
            memory: 500Mi
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      terminationGracePeriodSeconds: 30
      securityContext:
        null
---
# Source: 9c-network/templates/data-provider.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: data-provider-read
    app.kubernetes.io/instance: heimdall
  name: data-provider-read
  namespace: heimdall
spec:
  podManagementPolicy: OrderedReady
  replicas: 0
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app: data-provider-read
  serviceName: data-provider-read
  template:
    metadata:
      labels:
        app: data-provider-read
    spec:
      containers:
      - args:
        - /app/NineChronicles.DataProvider.Executable
        command:
        - /bin/sh
        - -c
        env:
        - name: NC_StorePath
          value: /data/data-provider
        - name: NC_AppProtocolVersionToken
          value: 200290/eE394bb942fa7c2d807C170C7Db7F26cb3EA037F/MEUCIQDtmXbXy9seYISvIxPbu1K5JH4yfar91pA+5qixFPp3BAIgCVAjBmO.6xBEUeyt6ezYgytsmngnI8SYKgS4GQF0jaw=/ZHU5OnRpbWVzdGFtcHUxMDoyMDI1LTAzLTEwZQ==
        - name: NC_Confirmations
          value: '0'
        
        - name: NC_PeerStrings__0
          value: 03380b4ba8722057c9b4d8594f8de9481eb296aba4b3c168666f57b17596452ae7,heimdall-seed-1.nine-chronicles.com,31234
        
        - name: NC_Preload
          value: 'true'
        - name: NC_NoMiner
          value: 'true'
        - name: NC_Render
          value: 'false'
        - name: NC_Planet
          value: "Heimdall"
        - name: NC_TrustedAppProtocolVersionSigners__0
          value: 031c5b9cb11b1cc07f8530599fa32338967e41cb364cca552a34ad2157ccb237bf
        - name: NC_GenesisBlockPath
          value: https://planets.nine-chronicles.com/planets/0x000000000001/genesis
        - name: NC_TxLifeTime
          value: '10'
        - name: NC_MySqlConnectionString
          valueFrom:
            secretKeyRef:
              key: read-value
              name: data-provider
        - name: PLUGIN_PATH
          value: /data
        - name: NC_Planet
          value: Heimdall
        - name: DOTNET_gcServer
          value: "1"
        image: planetariumhq/ninechronicles-dataprovider:250
        imagePullPolicy: Always
        livenessProbe:
          exec:
            command:
            - /bin/bash
            - -c
            - "set -e\nlast_block=\"$(\n  curl \\\n    -H 'Content-Type: application/json'\
              \ \\\n    --data '{\"query\":\"query{chainQuery{blockQuery{blocks(desc:true,limit:1){timestamp}}}}\"\
              }' \\\n    http://localhost:80/graphql_headless \\\n  | jq -r '.data.chainQuery.blockQuery.blocks[0].timestamp'\n\
              )\"\nlast_timestamp=\"$(date +%s -u --date=\"$last_block\")\"\nnow=\"\
              $(date +%s -u)\"\n[[ $(( now - last_timestamp )) -lt 360 ]]\n"
          initialDelaySeconds: 1800
          periodSeconds: 60
          timeoutSeconds: 60
        readinessProbe:
          exec:
            command:
            - /bin/bash
            - -c
            - "set -e\npreloaded=\"$(\n  curl \\\n    -H 'Content-Type: application/json'\
              \ \\\n    --data '{\"query\":\"query{nodeStatus{preloadEnded}}\"}' \\\
              \n    http://localhost:80/graphql_headless \\\n  | jq .data.nodeStatus.preloadEnded\n\
              )\"\n[[ \"$preloaded\" = \"true\" ]]\n"
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 10
        name: data-provider-read
        ports:
        - containerPort: 80
          name: graphql
          protocol: TCP
        - containerPort: 31234
          name: headless
          protocol: TCP
        resources:
          requests:
            cpu: "3"
            memory: 28Gi
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /data
          name: data-provider-read-data
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      terminationGracePeriodSeconds: 30
      volumes:
      - name: download-snapshot-script
        configMap:
          defaultMode: 0700
          name: heimdall-download-snapshot-script
  volumeClaimTemplates:
  - metadata:
      name: data-provider-read-data
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 300Gi
      storageClassName: heimdall-gp3
      volumeMode: Filesystem
  updateStrategy:
    type: RollingUpdate
---
# Source: 9c-network/templates/data-provider.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: data-provider-write
    app.kubernetes.io/instance: heimdall
  name: data-provider-write
  namespace: heimdall
spec:
  podManagementPolicy: OrderedReady
  replicas: 1
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app: data-provider-write
  serviceName: data-provider-write
  template:
    metadata:
      labels:
        app: data-provider-write
    spec:
      containers:
      - args:
        - /bin/check_chain_tip.sh $(DP_HOST) $(DP_USER) $(DP_TOKEN) $(DP_PORT) $(DP_DATABASE) $(RESET_SNAPSHOT_OPTION)
          && /app/NineChronicles.DataProvider.Executable
          --config-path=https://9c-cluster-config.s3.us-east-2.amazonaws.com/9c-main/heimdall/appsettings-nodeinfra.json
        command:
        - /bin/sh
        - -c
        env:
        - name: NC_StorePath
          value: /data/data-provider
        - name: NC_AppProtocolVersionToken
          value: 200290/eE394bb942fa7c2d807C170C7Db7F26cb3EA037F/MEUCIQDtmXbXy9seYISvIxPbu1K5JH4yfar91pA+5qixFPp3BAIgCVAjBmO.6xBEUeyt6ezYgytsmngnI8SYKgS4GQF0jaw=/ZHU5OnRpbWVzdGFtcHUxMDoyMDI1LTAzLTEwZQ==
        - name: NC_Confirmations
          value: '0'
        
        - name: NC_PeerStrings__0
          value: 03380b4ba8722057c9b4d8594f8de9481eb296aba4b3c168666f57b17596452ae7,heimdall-seed-1.nine-chronicles.com,31234
        
        - name: NC_Preload
          value: 'false'
        - name: NC_NoMiner
          value: 'true'
        - name: NC_Render
          value: "true"
        - name: NC_Planet
          value: "Heimdall"
        - name: NC_TrustedAppProtocolVersionSigners__0
          value: 031c5b9cb11b1cc07f8530599fa32338967e41cb364cca552a34ad2157ccb237bf
        - name: NC_GenesisBlockPath
          value: https://planets.nine-chronicles.com/planets/0x000000000001/genesis
        - name: NC_BlockInsertInterval
          value: '10'
        - name: NC_BlockIndexFilePath
          value: /data
        - name: NC_TxLifeTime
          value: '10'
        - name: NC_MySqlConnectionString
          valueFrom:
            secretKeyRef:
              key: write-value
              name: data-provider
        - name: DP_HOST
          valueFrom:
            secretKeyRef:
              key: write-host
              name: data-provider
        - name: DP_USER
          valueFrom:
            secretKeyRef:
              key: user
              name: data-provider
        - name: DP_TOKEN
          valueFrom:
            secretKeyRef:
              key: token
              name: data-provider
        - name: DP_PORT
          valueFrom:
            secretKeyRef:
              key: port
              name: data-provider
        - name: DP_DATABASE
          valueFrom:
            secretKeyRef:
              key: database
              name: data-provider
        - name: RESET_SNAPSHOT_OPTION
          value: "false"
        - name: PLUGIN_PATH
          value: /data
        - name: NC_Planet
          value: Heimdall
        - name: DOTNET_gcServer
          value: "1"
        image: planetariumhq/ninechronicles-dataprovider:250
        imagePullPolicy: Always
        livenessProbe:
          exec:
            command:
            - /bin/bash
            - -c
            - "set -e\nlast_block=\"$(\n  curl \\\n    -H 'Content-Type: application/json'\
              \ \\\n    --data '{\"query\":\"query{chainQuery{blockQuery{blocks(desc:true,limit:1){timestamp}}}}\"\
              }' \\\n    http://localhost:80/graphql_headless \\\n  | jq -r '.data.chainQuery.blockQuery.blocks[0].timestamp'\n\
              )\"\nlast_timestamp=\"$(date +%s -u --date=\"$last_block\")\"\nnow=\"\
              $(date +%s -u)\"\n[[ $(( now - last_timestamp )) -lt 360 ]]\n"
          initialDelaySeconds: 1800
          periodSeconds: 60
          timeoutSeconds: 60
        name: data-provider-write
        ports:
        - containerPort: 80
          name: graphql
          protocol: TCP
        - containerPort: 31234
          name: headless
          protocol: TCP
        resources:
          requests:
            cpu: "3"
            memory: 28Gi
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /bin/check_chain_tip.sh
          name: data-provider-script-volume
          readOnly: true
          subPath: check_chain_tip.sh
        - mountPath: /data
          name: data-provider-write-data
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      terminationGracePeriodSeconds: 30
      volumes:
      - name: data-provider-script-volume
        configMap:
          defaultMode: 488
          name: heimdall-data-provider-script
      - name: download-snapshot-script
        configMap:
          defaultMode: 0700
          name: heimdall-download-snapshot-script
  volumeClaimTemplates:
  - metadata:
      name: data-provider-write-data
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 300Gi
      storageClassName: heimdall-gp3
      volumeMode: Filesystem
  updateStrategy:
    type: RollingUpdate
---
# Source: 9c-network/templates/jwt-headless.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: jwt-headless
    app.kubernetes.io/instance: heimdall
  name: jwt-headless
  namespace: heimdall
spec:
  podManagementPolicy: OrderedReady
  replicas: 1
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app: jwt-headless
  serviceName: jwt-headless
  template:
    metadata:
      labels:
        app: jwt-headless
      annotations:
        prometheus.io/port: '80'
        prometheus.io/scrape: 'true'
      name: jwt-headless
    spec:
      containers:
      - args:
        - NineChronicles.Headless.Executable.dll
        - run
        - --app-protocol-version=200290/eE394bb942fa7c2d807C170C7Db7F26cb3EA037F/MEUCIQDtmXbXy9seYISvIxPbu1K5JH4yfar91pA+5qixFPp3BAIgCVAjBmO.6xBEUeyt6ezYgytsmngnI8SYKgS4GQF0jaw=/ZHU5OnRpbWVzdGFtcHUxMDoyMDI1LTAzLTEwZQ==
        - --trusted-app-protocol-version-signer=031c5b9cb11b1cc07f8530599fa32338967e41cb364cca552a34ad2157ccb237bf
        - --genesis-block-path=https://planets.nine-chronicles.com/planets/0x000000000001/genesis
        - --port=31234
        - --no-miner
        - --store-type=rocksdb
        - --store-path=/data/headless
        - --host=heimdall-rke2-jwt-rpc.nine-chronicles.com
        - --peer=03380b4ba8722057c9b4d8594f8de9481eb296aba4b3c168666f57b17596452ae7,heimdall-seed-1.nine-chronicles.com,31234
        - --graphql-server
        - --graphql-host=0.0.0.0
        - --graphql-port=80
        - --rpc-server
        - --rpc-remote-server
        - --rpc-listen-host=0.0.0.0
        - --rpc-listen-port=31238
        - --no-cors
        - --chain-tip-stale-behavior-type=reboot
        - --tx-life-time=10
        - --planet=Heimdall
        - --config=https://9c-cluster-config.s3.us-east-2.amazonaws.com/9c-main/heimdall/appsettings-nodeinfra.json
        - --tx-quota-per-signer=1
        command:
        - dotnet
        image: planetariumhq/ninechronicles-headless:260
        imagePullPolicy: Always
        name: jwt-headless
        ports:
        - containerPort: 80
          name: graphql
          protocol: TCP
        - containerPort: 31234
          name: headless
          protocol: TCP
        - containerPort: 31238
          name: rpc
          protocol: TCP
        livenessProbe:
          exec:
            command:
            - /bin/liveness_probe_jwt.sh
          failureThreshold: 3
          initialDelaySeconds: 1800
          periodSeconds: 30
          timeoutSeconds: 30
        readinessProbe:
          exec:
            command:
            - /bin/readiness_probe_jwt.sh
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 10
        resources:
          requests:
            cpu: 3
            memory: 25Gi
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /data
          name: jwt-headless-data
        - mountPath: /bin/liveness_probe_jwt.sh
          name: probe-script
          readOnly: true
          subPath: liveness_probe_jwt.sh
        - mountPath: /bin/readiness_probe_jwt.sh
          name: probe-script
          readOnly: true
          subPath: readiness_probe_jwt.sh
        - mountPath: /app/logs
          name: json-log
        - mountPath: /app/appsettings.configmap.json
          name: appsettings
          subPath: appsettings.json
        env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: NAMESPACE_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: JSON_LOG_PATH
            value: ./logs/$(POD_NAME)_$(NAMESPACE_NAME)_jwt-headless.json
          - name: JWT__EnableJwtAuthentication
            value: "true"
          - name: JWT__Key
            valueFrom:
              secretKeyRef:
                key: jwt
                name: private-keys
          - name: JWT_TOKEN
            valueFrom:
              secretKeyRef:
                key: jwt-token
                name: private-keys
          - name: IpRateLimiting__EnableEndpointRateLimiting
            value: "false"
          - name: IpRateLimiting__GeneralRules__0__Period
            value: 60s
          - name: IpRateLimiting__GeneralRules__0__Limit
            value: "12"
          - name: IpRateLimiting__GeneralRules__1__Period
            value: 60s
          - name: IpRateLimiting__GeneralRules__1__Limit
            value: "12"
          - name: IpRateLimiting__IpBanMinute
            value: "10"
          - name: IpRateLimiting__IpBanThresholdCount
            value: "5"
          - name: Headless__AccessControlService__AccessControlServiceType
            value: local
          - name: Headless__AccessControlService__AccessControlServiceConnectionString
            value: https://9c-cluster-config.s3.us-east-2.amazonaws.com/9c-main/odin/whitelist.json
          - name: PLUGIN_PATH
            value: /data
          - name: DOTNET_gcServer
            value: "1"
      nodeSelector:
        node.kubernetes.io/network: heimdall
        node.kubernetes.io/node-index: "4"
      tolerations:
        - effect: NoSchedule
          key: dedicated
          operator: Equal
          value: remote-headless-test
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      terminationGracePeriodSeconds: 30
      volumes:
      - configMap:
          defaultMode: 448
          name: heimdall-probe-script
        name: probe-script
      - name: download-snapshot-script
        configMap:
          defaultMode: 0700
          name: heimdall-download-snapshot-script
      - hostPath:
          path: /var/log/headless
          type: DirectoryOrCreate
        name: json-log
      - name: appsettings
        configMap:
          defaultMode: 0700
          name: appsettings
  volumeClaimTemplates:
  - metadata:
      name: jwt-headless-data
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 300Gi
      storageClassName: heimdall-longhorn
      volumeMode: Filesystem
  updateStrategy:
    type: RollingUpdate
---
# Source: 9c-network/templates/market-service-write.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: market-service-write
    app.kubernetes.io/instance: heimdall
  name: market-service-write
  namespace: heimdall
spec:
  replicas: 1
  selector:
    matchLabels:
      app: market-service-write
  serviceName: market-service-write
  template:
    metadata:
      labels:
        app: market-service-write
    spec:
      containers:
        - args:
            - MarketService.dll
          command:
            - dotnet
          env:
            - name: ConnectionStrings__MARKET
              valueFrom:
                secretKeyRef:
                  key: connection-string
                  name: market-db
            - name: RpcConfig__Host
              valueFrom:
                secretKeyRef:
                  key: rpc-host
                  name: market-db
            - name: RpcConfig__Port
              valueFrom:
                secretKeyRef:
                  key: rpc-port
                  name: market-db
            - name: DOTNET_gcServer
              value: "1"
            - name: WorkerConfig__SyncShop
              value: "true"
            - name: WorkerConfig__SyncProduct
              value: "true"
          image: planetariumhq/market-service:git-bb126180a9e879ac3e926b60f79a93953f00264a
          name: market-service-write
          ports:
            - containerPort: 80
      restartPolicy: Always
  updateStrategy:
    type: RollingUpdate
---
# Source: 9c-network/templates/market-service.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: market-service
    app.kubernetes.io/instance: heimdall
  name: market-service
  namespace: heimdall
spec:
  replicas: 1
  selector:
    matchLabels:
      app: market-service
  serviceName: market-service
  template:
    metadata:
      labels:
        app: market-service
    spec:
      containers:
        - args:
            - MarketService.dll
          command:
            - dotnet
          env:
            - name: ConnectionStrings__MARKET
              valueFrom:
                secretKeyRef:
                  key: connection-string
                  name: market-db
            - name: RpcConfig__Host
              valueFrom:
                secretKeyRef:
                  key: rpc-host
                  name: market-db
            - name: RpcConfig__Port
              valueFrom:
                secretKeyRef:
                  key: rpc-port
                  name: market-db
            - name: DOTNET_gcServer
              value: "1"
            - name: WorkerConfig__SyncShop
              value: "false"
            - name: WorkerConfig__SyncProduct
              value: "false"
          image: planetariumhq/market-service:git-bb126180a9e879ac3e926b60f79a93953f00264a
          name: market-service
          ports:
            - containerPort: 80
      restartPolicy: Always
  updateStrategy:
    type: RollingUpdate
---
# Source: 9c-network/templates/remote-headless.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: remote-headless-1
    app.kubernetes.io/instance: heimdall
  name: remote-headless-1
  namespace: heimdall
spec:
  podManagementPolicy: OrderedReady
  replicas: 1
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app: remote-headless-1
  serviceName: remote-headless-1
  template:
    metadata:
      labels:
        app: remote-headless-1
      annotations:
        prometheus.io/port: '80'
        prometheus.io/scrape: 'true'
        ad.datadoghq.com/remote-headless-1.logs: |-
          [
            {
            "source": "container",
            "service": "remote-headless-1",
            "log_processing_rules": [
              {
                "type": "include_at_match",
                "name": "BlockEvaluationDuration",
                "pattern" : "pre-evaluation hash"
              },
              {
                "type": "exclude_at_match",
                "name": "excludeException",
                "pattern" : "Exception"
              },
              {
                "type": "exclude_at_match",
                "name": "excludeExceptionUndercase",
                "pattern" : "exception"
              },
              {
                "type": "exclude_at_match",
                "name": "excludeEvaluating",
                "pattern" : "Evaluating"
              }
            ]
          }]
      name: remote-headless-1
    spec:
      initContainers:
        - command:
          - sh
          - '-c'
          - >
            apk --no-cache add curl tar

            mkdir /data/datadog

            curl -s -L
            https://github.com/DataDog/dd-trace-dotnet/releases/download/v2.57.0/datadog-dotnet-apm-2.57.0.arm64.tar.gz
            | tar xvz -C /data/datadog

            sh /data/datadog/createLogPath.sh
          image: alpine
          imagePullPolicy: Always
          name: setup-datadog
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /data
            name: remote-headless-data-1
        - command:
          - sh
          - '-c'
          - >
            apk --no-cache add curl

            # Endpoint to check

            SEED="http://heimdall-seed-1.nine-chronicles.com:31237/playground.html"

            echo Checking: ${SEED}

            while [[ $(curl --silent --output /dev/null --request GET
            --write-out "%{http_code}" ${SEED}) -ne 200 ]]; do
              echo "Not ready"
              sleep 5s
            done

            VALIDATOR="heimdall-validator-1.nine-chronicles.com/ui/playground"

            echo Checking: ${VALIDATOR}

            while [[ $(curl --silent --output /dev/null --request GET
            --write-out "%{http_code}" ${VALIDATOR}) -ne 200 ]]; do
              echo "Not ready"
              sleep 5s
            done

            echo Ready
          image: alpine
          imagePullPolicy: Always
          name: wait
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
      containers:
      - args:
        - NineChronicles.Headless.Executable.dll
        - run
        - --app-protocol-version=200290/eE394bb942fa7c2d807C170C7Db7F26cb3EA037F/MEUCIQDtmXbXy9seYISvIxPbu1K5JH4yfar91pA+5qixFPp3BAIgCVAjBmO.6xBEUeyt6ezYgytsmngnI8SYKgS4GQF0jaw=/ZHU5OnRpbWVzdGFtcHUxMDoyMDI1LTAzLTEwZQ==
        - --trusted-app-protocol-version-signer=031c5b9cb11b1cc07f8530599fa32338967e41cb364cca552a34ad2157ccb237bf
        - --genesis-block-path=https://planets.nine-chronicles.com/planets/0x000000000001/genesis
        - --port=31234
        - --no-miner
        - --store-type=rocksdb
        - --store-path=/data/headless
        - --host=heimdall-rke2-rpc-1.nine-chronicles.com
        - --peer=03380b4ba8722057c9b4d8594f8de9481eb296aba4b3c168666f57b17596452ae7,heimdall-seed-1.nine-chronicles.com,31234
        - --graphql-server
        - --graphql-host=0.0.0.0
        - --graphql-port=80
        - --rpc-server
        - --rpc-remote-server
        - --rpc-listen-host=0.0.0.0
        - --rpc-listen-port=31238
        - --no-cors
        - --chain-tip-stale-behavior-type=reboot
        - --tx-life-time=10
        - --planet=Heimdall
        - --config=https://9c-cluster-config.s3.us-east-2.amazonaws.com/9c-main/heimdall/appsettings-nodeinfra.json
        - --tx-quota-per-signer=1
        command:
        - dotnet
        image: planetariumhq/ninechronicles-headless:260
        imagePullPolicy: Always
        name: remote-headless-1
        ports:
        - containerPort: 80
          name: graphql
          protocol: TCP
        - containerPort: 31234
          name: headless
          protocol: TCP
        - containerPort: 31238
          name: rpc
          protocol: TCP
        livenessProbe:
          exec:
            command:
            - /bin/liveness_probe.sh
          failureThreshold: 5
          initialDelaySeconds: 1800
          periodSeconds: 60
          timeoutSeconds: 60
        readinessProbe:
          exec:
            command:
            - /bin/readiness_probe.sh
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 10
        resources:
          requests:
            cpu: "3"
            memory: 25Gi
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /data
          name: remote-headless-data-1
        - mountPath: /bin/liveness_probe.sh
          name: probe-script
          readOnly: true
          subPath: liveness_probe.sh
        - mountPath: /bin/readiness_probe.sh
          name: probe-script
          readOnly: true
          subPath: readiness_probe.sh
        - mountPath: /app/logs
          name: json-log
        - mountPath: /app/appsettings.configmap.json
          name: appsettings
          subPath: appsettings.json
        env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: NAMESPACE_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: JSON_LOG_PATH
            value: ./logs/$(POD_NAME)_$(NAMESPACE_NAME)_remote-headless-1.json
          - name: OTLP_ENDPOINT
            value: 'http://datadog.datadog.svc.cluster.local:4317'
          - name: DD_ENV
            value: production
          - name: DD_DOTNET_TRACER_HOME
            value: /data/datadog
          - name: DD_AGENT_HOST
            value: datadog.datadog.svc.cluster.local
          - name: DD_RUNTIME_METRICS_ENABLED
            value: 'true'
          - name: DD_DYNAMIC_INSTRUMENTATION_ENABLED
            value: 'true'
          - name: CORECLR_ENABLE_PROFILING
            value: '1'
          - name: CORECLR_PROFILER
            value: '{846F5F1C-F9AE-4B07-969E-05C26BC060D8}'
          - name: CORECLR_PROFILER_PATH
            value: /data/datadog/Datadog.Trace.ClrProfiler.Native.so
          - name: ASPNETCORE_ENVIRONMENT
            value: 'production'
          - name: IpRateLimiting__EnableEndpointRateLimiting
            value: "true"
          - name: IpRateLimiting__GeneralRules__0__Period
            value: 60s
          - name: IpRateLimiting__GeneralRules__0__Limit
            value: "12"
          - name: IpRateLimiting__GeneralRules__1__Period
            value: 300s
          - name: IpRateLimiting__GeneralRules__1__Limit
            value: "10"
          - name: IpRateLimiting__IpBanMinute
            value: "5"
          - name: IpRateLimiting__IpBanThresholdCount
            value: "15"
          - name: MultiAccountManaging__EnableManaging
            value: "true"
          - name: IpRateLimiting__IpWhiteList__1
            value: ::ffff:3.18.248.125
          - name: IpRateLimiting__IpWhiteList__2
            value: ::ffff:13.124.239.97
          - name: IpRateLimiting__IpWhiteList__3
            value: ::ffff:118.131.110.197
          - name: IpRateLimiting__IpWhiteList__4
            value: ::ffff:10.42.2.0
          - name: IpRateLimiting__IpWhiteList__5
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: status.hostIP
          - name: Headless__AccessControlService__AccessControlServiceType
            value: local
          - name: Headless__AccessControlService__AccessControlServiceConnectionString
            value: https://9c-cluster-config.s3.us-east-2.amazonaws.com/9c-main/odin/whitelist.json
          - name: PLUGIN_PATH
            value: /data
          - name: DOTNET_gcServer
            value: "1"
          - name: JWT__Key
            valueFrom:
              secretKeyRef:
                key: jwt
                name: private-keys
      nodeSelector:
        node.kubernetes.io/network: heimdall
        node.kubernetes.io/node-index: "1"
      tolerations:
        - effect: NoSchedule
          key: dedicated
          operator: Equal
          value: remote-headless-test
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      terminationGracePeriodSeconds: 30
      volumes:
      - configMap:
          defaultMode: 448
          name: heimdall-probe-script
        name: probe-script
      - name: download-snapshot-script
        configMap:
          defaultMode: 0700
          name: heimdall-download-snapshot-script
      - hostPath:
          path: /var/log/headless
          type: DirectoryOrCreate
        name: json-log
      - name: appsettings
        configMap:
          defaultMode: 0700
          name: appsettings
  volumeClaimTemplates:
  - metadata:
      name: remote-headless-data-1
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 300Gi
      storageClassName: heimdall-longhorn
      volumeMode: Filesystem
  updateStrategy:
    type: RollingUpdate
---
# Source: 9c-network/templates/remote-headless.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: remote-headless-2
    app.kubernetes.io/instance: heimdall
  name: remote-headless-2
  namespace: heimdall
spec:
  podManagementPolicy: OrderedReady
  replicas: 1
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app: remote-headless-2
  serviceName: remote-headless-2
  template:
    metadata:
      labels:
        app: remote-headless-2
      annotations:
        prometheus.io/port: '80'
        prometheus.io/scrape: 'true'
        ad.datadoghq.com/remote-headless-2.logs: |-
          [
            {
            "source": "container",
            "service": "remote-headless-2",
            "log_processing_rules": [
              {
                "type": "include_at_match",
                "name": "BlockEvaluationDuration",
                "pattern" : "pre-evaluation hash"
              },
              {
                "type": "exclude_at_match",
                "name": "excludeException",
                "pattern" : "Exception"
              },
              {
                "type": "exclude_at_match",
                "name": "excludeExceptionUndercase",
                "pattern" : "exception"
              },
              {
                "type": "exclude_at_match",
                "name": "excludeEvaluating",
                "pattern" : "Evaluating"
              }
            ]
          }]
      name: remote-headless-2
    spec:
      initContainers:
        - command:
          - sh
          - '-c'
          - >
            apk --no-cache add curl tar

            mkdir /data/datadog

            curl -s -L
            https://github.com/DataDog/dd-trace-dotnet/releases/download/v2.57.0/datadog-dotnet-apm-2.57.0.arm64.tar.gz
            | tar xvz -C /data/datadog

            sh /data/datadog/createLogPath.sh
          image: alpine
          imagePullPolicy: Always
          name: setup-datadog
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /data
            name: remote-headless-data-2
        - command:
          - sh
          - '-c'
          - >
            apk --no-cache add curl

            # Endpoint to check

            SEED="http://heimdall-seed-1.nine-chronicles.com:31237/playground.html"

            echo Checking: ${SEED}

            while [[ $(curl --silent --output /dev/null --request GET
            --write-out "%{http_code}" ${SEED}) -ne 200 ]]; do
              echo "Not ready"
              sleep 5s
            done

            VALIDATOR="heimdall-validator-1.nine-chronicles.com/ui/playground"

            echo Checking: ${VALIDATOR}

            while [[ $(curl --silent --output /dev/null --request GET
            --write-out "%{http_code}" ${VALIDATOR}) -ne 200 ]]; do
              echo "Not ready"
              sleep 5s
            done

            echo Ready
          image: alpine
          imagePullPolicy: Always
          name: wait
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
      containers:
      - args:
        - NineChronicles.Headless.Executable.dll
        - run
        - --app-protocol-version=200290/eE394bb942fa7c2d807C170C7Db7F26cb3EA037F/MEUCIQDtmXbXy9seYISvIxPbu1K5JH4yfar91pA+5qixFPp3BAIgCVAjBmO.6xBEUeyt6ezYgytsmngnI8SYKgS4GQF0jaw=/ZHU5OnRpbWVzdGFtcHUxMDoyMDI1LTAzLTEwZQ==
        - --trusted-app-protocol-version-signer=031c5b9cb11b1cc07f8530599fa32338967e41cb364cca552a34ad2157ccb237bf
        - --genesis-block-path=https://planets.nine-chronicles.com/planets/0x000000000001/genesis
        - --port=31234
        - --no-miner
        - --store-type=rocksdb
        - --store-path=/data/headless
        - --host=heimdall-rke2-rpc-2.nine-chronicles.com
        - --peer=03380b4ba8722057c9b4d8594f8de9481eb296aba4b3c168666f57b17596452ae7,heimdall-seed-1.nine-chronicles.com,31234
        - --graphql-server
        - --graphql-host=0.0.0.0
        - --graphql-port=80
        - --rpc-server
        - --rpc-remote-server
        - --rpc-listen-host=0.0.0.0
        - --rpc-listen-port=31238
        - --no-cors
        - --chain-tip-stale-behavior-type=reboot
        - --tx-life-time=10
        - --planet=Heimdall
        - --config=https://9c-cluster-config.s3.us-east-2.amazonaws.com/9c-main/heimdall/appsettings-nodeinfra.json
        - --tx-quota-per-signer=1
        command:
        - dotnet
        image: planetariumhq/ninechronicles-headless:260
        imagePullPolicy: Always
        name: remote-headless-2
        ports:
        - containerPort: 80
          name: graphql
          protocol: TCP
        - containerPort: 31234
          name: headless
          protocol: TCP
        - containerPort: 31238
          name: rpc
          protocol: TCP
        livenessProbe:
          exec:
            command:
            - /bin/liveness_probe.sh
          failureThreshold: 5
          initialDelaySeconds: 1800
          periodSeconds: 60
          timeoutSeconds: 60
        readinessProbe:
          exec:
            command:
            - /bin/readiness_probe.sh
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 10
        resources:
          requests:
            cpu: "3"
            memory: 25Gi
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /data
          name: remote-headless-data-2
        - mountPath: /bin/liveness_probe.sh
          name: probe-script
          readOnly: true
          subPath: liveness_probe.sh
        - mountPath: /bin/readiness_probe.sh
          name: probe-script
          readOnly: true
          subPath: readiness_probe.sh
        - mountPath: /app/logs
          name: json-log
        - mountPath: /app/appsettings.configmap.json
          name: appsettings
          subPath: appsettings.json
        env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: NAMESPACE_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: JSON_LOG_PATH
            value: ./logs/$(POD_NAME)_$(NAMESPACE_NAME)_remote-headless-2.json
          - name: OTLP_ENDPOINT
            value: 'http://datadog.datadog.svc.cluster.local:4317'
          - name: DD_ENV
            value: production
          - name: DD_DOTNET_TRACER_HOME
            value: /data/datadog
          - name: DD_AGENT_HOST
            value: datadog.datadog.svc.cluster.local
          - name: DD_RUNTIME_METRICS_ENABLED
            value: 'true'
          - name: DD_DYNAMIC_INSTRUMENTATION_ENABLED
            value: 'true'
          - name: CORECLR_ENABLE_PROFILING
            value: '1'
          - name: CORECLR_PROFILER
            value: '{846F5F1C-F9AE-4B07-969E-05C26BC060D8}'
          - name: CORECLR_PROFILER_PATH
            value: /data/datadog/Datadog.Trace.ClrProfiler.Native.so
          - name: ASPNETCORE_ENVIRONMENT
            value: 'production'
          - name: IpRateLimiting__EnableEndpointRateLimiting
            value: "true"
          - name: IpRateLimiting__GeneralRules__0__Period
            value: 60s
          - name: IpRateLimiting__GeneralRules__0__Limit
            value: "12"
          - name: IpRateLimiting__GeneralRules__1__Period
            value: 300s
          - name: IpRateLimiting__GeneralRules__1__Limit
            value: "10"
          - name: IpRateLimiting__IpBanMinute
            value: "5"
          - name: IpRateLimiting__IpBanThresholdCount
            value: "15"
          - name: MultiAccountManaging__EnableManaging
            value: "true"
          - name: IpRateLimiting__IpWhiteList__1
            value: ::ffff:3.18.248.125
          - name: IpRateLimiting__IpWhiteList__2
            value: ::ffff:13.124.239.97
          - name: IpRateLimiting__IpWhiteList__3
            value: ::ffff:118.131.110.197
          - name: IpRateLimiting__IpWhiteList__4
            value: ::ffff:10.42.2.0
          - name: IpRateLimiting__IpWhiteList__5
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: status.hostIP
          - name: Headless__AccessControlService__AccessControlServiceType
            value: local
          - name: Headless__AccessControlService__AccessControlServiceConnectionString
            value: https://9c-cluster-config.s3.us-east-2.amazonaws.com/9c-main/odin/whitelist.json
          - name: PLUGIN_PATH
            value: /data
          - name: DOTNET_gcServer
            value: "1"
          - name: JWT__Key
            valueFrom:
              secretKeyRef:
                key: jwt
                name: private-keys
      nodeSelector:
        node.kubernetes.io/network: heimdall
        node.kubernetes.io/node-index: "2"
      tolerations:
        - effect: NoSchedule
          key: dedicated
          operator: Equal
          value: remote-headless-test
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      terminationGracePeriodSeconds: 30
      volumes:
      - configMap:
          defaultMode: 448
          name: heimdall-probe-script
        name: probe-script
      - name: download-snapshot-script
        configMap:
          defaultMode: 0700
          name: heimdall-download-snapshot-script
      - hostPath:
          path: /var/log/headless
          type: DirectoryOrCreate
        name: json-log
      - name: appsettings
        configMap:
          defaultMode: 0700
          name: appsettings
  volumeClaimTemplates:
  - metadata:
      name: remote-headless-data-2
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 300Gi
      storageClassName: heimdall-longhorn
      volumeMode: Filesystem
  updateStrategy:
    type: RollingUpdate
---
# Source: 9c-network/templates/test-headless-1.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: test-headless-1
    app.kubernetes.io/instance: heimdall
  name: test-headless-1
  namespace: heimdall
spec:
  podManagementPolicy: OrderedReady
  replicas: 1
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app: test-headless-1
  serviceName: test-headless-1
  template:
    metadata:
      labels:
        app: test-headless-1
      annotations:
        prometheus.io/port: '80'
        prometheus.io/scrape: 'true'
        ad.datadoghq.com/test-headless-1.logs: |-
          [
            {
            "source": "container",
            "service": "test-headless-1",
            "log_processing_rules": [
              {
                "type": "include_at_match",
                "name": "BlockEvaluationDuration",
                "pattern" : "pre-evaluation hash"
              },
              {
                "type": "exclude_at_match",
                "name": "excludeException",
                "pattern" : "Exception"
              },
              {
                "type": "exclude_at_match",
                "name": "excludeExceptionUndercase",
                "pattern" : "exception"
              },
              {
                "type": "exclude_at_match",
                "name": "excludeEvaluating",
                "pattern" : "Evaluating"
              }
            ]
          }]
      name: test-headless-1
    spec:
      initContainers:
      - command:
          - sh
          - '-c'
          - >
            apk --no-cache add curl tar

            mkdir /data/datadog

            curl -s -L
            https://github.com/DataDog/dd-trace-dotnet/releases/download/v2.57.0/datadog-dotnet-apm-2.57.0.tar.gz
            | tar xvz -C /data/datadog

            sh /data/datadog/createLogPath.sh
        image: alpine
        imagePullPolicy: Always
        name: setup-datadog
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /data
          name: test-headless-data-1
      - command:
        - sh
        - '-c'
        - >
          apk --no-cache add curl

          # Endpoint to check

          SEED="http://heimdall-seed-1.nine-chronicles.com:31237/playground.html"

          echo Checking: ${SEED}

          while [[ $(curl --silent --output /dev/null --request GET
          --write-out "%{http_code}" ${SEED}) -ne 200 ]]; do
            echo "Not ready"
            sleep 5s
          done

          echo Ready
        image: alpine
        imagePullPolicy: Always
        name: wait
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      containers:
      - args:
        - NineChronicles.Headless.Executable.dll
        - run
        - --app-protocol-version=200290/eE394bb942fa7c2d807C170C7Db7F26cb3EA037F/MEUCIQDtmXbXy9seYISvIxPbu1K5JH4yfar91pA+5qixFPp3BAIgCVAjBmO.6xBEUeyt6ezYgytsmngnI8SYKgS4GQF0jaw=/ZHU5OnRpbWVzdGFtcHUxMDoyMDI1LTAzLTEwZQ==
        - --trusted-app-protocol-version-signer=031c5b9cb11b1cc07f8530599fa32338967e41cb364cca552a34ad2157ccb237bf
        - --genesis-block-path=https://planets.nine-chronicles.com/planets/0x000000000001/genesis
        - --port=31234
        - --no-miner
        - --store-type=rocksdb
        - --store-path=/data/headless
        - --host=heimdall-rke2-test-1.nine-chronicles.com
        - --peer=03380b4ba8722057c9b4d8594f8de9481eb296aba4b3c168666f57b17596452ae7,heimdall-seed-1.nine-chronicles.com,31234
        - --graphql-server
        - --graphql-host=0.0.0.0
        - --graphql-port=80
        - --rpc-server
        - --rpc-remote-server
        - --rpc-listen-host=0.0.0.0
        - --rpc-listen-port=31238
        - --no-cors
        - --chain-tip-stale-behavior-type=reboot
        - --tx-life-time=10
        - --planet=Heimdall
        - --config=https://9c-cluster-config.s3.us-east-2.amazonaws.com/9c-main/heimdall/appsettings-nodeinfra.json
        - --tx-quota-per-signer=1
        command:
        - dotnet
        image: planetariumhq/ninechronicles-headless:260
        imagePullPolicy: Always
        name: test-headless-1
        ports:
        - containerPort: 80
          name: graphql
          protocol: TCP
        - containerPort: 31234
          name: headless
          protocol: TCP
        - containerPort: 31238
          name: rpc
          protocol: TCP
        livenessProbe:
          exec:
            command:
            - /bin/liveness_probe.sh
          failureThreshold: 3
          initialDelaySeconds: 1800
          periodSeconds: 30
          timeoutSeconds: 30
        readinessProbe:
          exec:
            command:
            - /bin/readiness_probe.sh
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 10
        resources:
          requests:
            cpu: 1
            memory: 10Gi
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /data
          name: test-headless-data-1
        - mountPath: /bin/liveness_probe.sh
          name: probe-script
          readOnly: true
          subPath: liveness_probe.sh
        - mountPath: /bin/readiness_probe.sh
          name: probe-script
          readOnly: true
          subPath: readiness_probe.sh
        - mountPath: /app/logs
          name: json-log
        - mountPath: /app/appsettings.configmap.json
          name: appsettings
          subPath: appsettings.json
        env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: NAMESPACE_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: JSON_LOG_PATH
            value: ./logs/$(POD_NAME)_$(NAMESPACE_NAME)_test-headless-1.json
          - name: OTLP_ENDPOINT
            value: 'http://datadog.datadog.svc.cluster.local:4317'
          - name: CORECLR_ENABLE_PROFILING
            value: '1'
          - name: CORECLR_PROFILER
            value: '{846F5F1C-F9AE-4B07-969E-05C26BC060D8}'
          - name: CORECLR_PROFILER_PATH
            value: /data/datadog/Datadog.Trace.ClrProfiler.Native.so
          - name: LD_PRELOAD
            value: /data/datadog/continuousprofiler/Datadog.Linux.ApiWrapper.x64.so
          - name: DD_ENV
            value: production
          - name: ASPNETCORE_ENVIRONMENT
            value: 'production'
          - name: DD_PROFILING_ENABLED
            value: 'true'
          - name: DD_PROFILING_ALLOCATION_ENABLED
            value: 'true'
          - name: DD_PROFILING_LOCK_ENABLED
            value: 'true'
          - name: DD_PROFILING_HEAP_ENABLED
            value: 'true'
          - name: DD_DOTNET_TRACER_HOME
            value: /data/datadog
          - name: DD_AGENT_HOST
            value: datadog.datadog.svc.cluster.local
          - name: IpRateLimiting__EnableEndpointRateLimiting
            value: "true"
          - name: IpRateLimiting__GeneralRules__0__Period
            value: 60s
          - name: IpRateLimiting__GeneralRules__0__Limit
            value: "12"
          - name: IpRateLimiting__GeneralRules__1__Period
            value: 60s
          - name: IpRateLimiting__GeneralRules__1__Limit
            value: "12"
          - name: IpRateLimiting__IpBanMinute
            value: "10"
          - name: IpRateLimiting__IpBanThresholdCount
            value: "5"
          - name: Headless__AccessControlService__AccessControlServiceType
            value: local
          - name: Headless__AccessControlService__AccessControlServiceConnectionString
            value: https://9c-cluster-config.s3.us-east-2.amazonaws.com/9c-main/odin/whitelist.json
          - name: PLUGIN_PATH
            value: /data
          - name: DOTNET_gcServer
            value: "1"
      - args:
        - Libplanet.Store.Remote.Executable.dll
        - /data/headless/states
        - --port
        - "5000"
        - --http-port
        - "5001"
        command:
        - dotnet
        image: planetariumhq/libplanet-remote-kv:git-b44d0dc23391aa45f354e57cc28f75bd130d9e70
        imagePullPolicy: Always
        name: test-headless-1-remote-kv
        ports:
        - containerPort: 5000
          name: rpc
          protocol: TCP
        - containerPort: 5001
          name: http
          protocol: TCP
        resources:
          null
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /data
          name: test-headless-data-1
        - mountPath: /app/logs
          name: json-log
        env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: NAMESPACE_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: JSON_LOG_PATH
            value: ./logs/$(POD_NAME)_$(NAMESPACE_NAME)_test-headless-1.json
      tolerations:
        - effect: NoSchedule
          key: dedicated
          operator: Equal
          value: remote-headless-test
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      terminationGracePeriodSeconds: 30
      volumes:
      - configMap:
          defaultMode: 448
          name: heimdall-probe-script
        name: probe-script
      - name: download-snapshot-script
        configMap:
          defaultMode: 0700
          name: heimdall-download-snapshot-script
      - hostPath:
          path: /var/log/headless
          type: DirectoryOrCreate
        name: json-log
      - name: appsettings
        configMap:
          defaultMode: 0700
          name: appsettings
  volumeClaimTemplates:
  - metadata:
      name: test-headless-data-1
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 300Gi
      storageClassName: heimdall-gp3
      volumeMode: Filesystem
  updateStrategy:
    type: RollingUpdate
---
# Source: 9c-network/templates/validator.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: validator-5
    app.kubernetes.io/instance: heimdall
  name: validator-5
  namespace: heimdall
spec:
  replicas: 1
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app: validator-5
  serviceName: validator-5
  template:
    metadata:
      labels:
        app: validator-5
      name: validator-5
      annotations:
        prometheus.io/port: '80'
        prometheus.io/scrape: 'true'
        ad.datadoghq.com/validator-5.logs: |-
          [
            {
            "source": "container",
            "service": "validator-5",
            "log_processing_rules": [
              {
                "type": "include_at_match",
                "name": "BlockEvaluationDuration",
                "pattern" : "pre-evaluation hash"
              },
              {
                "type": "exclude_at_match",
                "name": "excludeException",
                "pattern" : "Exception"
              },
              {
                "type": "exclude_at_match",
                "name": "excludeExceptionUndercase",
                "pattern" : "exception"
              },
              {
                "type": "exclude_at_match",
                "name": "excludeEvaluating",
                "pattern" : "Evaluating"
              }
            ]
          }]
    spec:
      initContainers:
      - command:
          - sh
          - '-c'
          - >
            apk --no-cache add curl tar

            mkdir /data/datadog

            curl -s -L
            https://github.com/DataDog/dd-trace-dotnet/releases/download/v2.57.0/datadog-dotnet-apm-2.57.0.arm64.tar.gz
            | tar xvz -C /data/datadog

            sh /data/datadog/createLogPath.sh
        image: alpine
        imagePullPolicy: Always
        name: setup-datadog
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /data
          name: validator-data-5
      - command:
        - sh
        - '-c'
        - >
          apk --no-cache add curl

          # Endpoint to check

          SEED="http://heimdall-seed-1.nine-chronicles.com:31237/playground.html"

          echo Checking: ${SEED}

          while [[ $(curl --silent --output /dev/null --request GET
          --write-out "%{http_code}" ${SEED}) -ne 200 ]]; do
            echo "Not ready"
            sleep 5s
          done

          echo Ready
        image: alpine
        imagePullPolicy: Always
        name: wait
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      containers:
      - args:
        - NineChronicles.Headless.Executable.dll
        - run
        - --app-protocol-version=200290/eE394bb942fa7c2d807C170C7Db7F26cb3EA037F/MEUCIQDtmXbXy9seYISvIxPbu1K5JH4yfar91pA+5qixFPp3BAIgCVAjBmO.6xBEUeyt6ezYgytsmngnI8SYKgS4GQF0jaw=/ZHU5OnRpbWVzdGFtcHUxMDoyMDI1LTAzLTEwZQ==
        - --trusted-app-protocol-version-signer=031c5b9cb11b1cc07f8530599fa32338967e41cb364cca552a34ad2157ccb237bf
        - --genesis-block-path=https://planets.nine-chronicles.com/planets/0x000000000001/genesis
        - --host=heimdall-rke2-validator-1-rpc.nine-chronicles.com
        - --port=31234
        - --store-path=/data/headless
        - --store-type=rocksdb
        - --peer=03380b4ba8722057c9b4d8594f8de9481eb296aba4b3c168666f57b17596452ae7,heimdall-seed-1.nine-chronicles.com,31234
        - --graphql-server
        - --graphql-host=0.0.0.0
        - --graphql-port=80
        - --swarm-private-key
        - $(PRIVATE_KEY)
        - --miner-private-key
        - $(PRIVATE_KEY)
        - --consensus-private-key
        - $(PRIVATE_KEY)
        - --consensus-port=6000
        - --consensus-seed=03380b4ba8722057c9b4d8594f8de9481eb296aba4b3c168666f57b17596452ae7,heimdall-seed-1.nine-chronicles.com,31235
        - --tx-quota-per-signer=1
        - --tx-life-time=10
        - --consensus-target-block-interval=8000
        - --planet=Heimdall
        - --config=https://9c-cluster-config.s3.us-east-2.amazonaws.com/9c-main/heimdall/appsettings-nodeinfra.json
        command:
          - dotnet
        env:
          - name: PRIVATE_KEY
            valueFrom:
              secretKeyRef:
                key: validator-private-key-5
                name: private-keys
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: NAMESPACE_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: JSON_LOG_PATH
            value: ./logs/$(POD_NAME)_$(NAMESPACE_NAME)_validator-5.json
          - name: OTLP_ENDPOINT
            value: 'http://datadog.datadog.svc.cluster.local:4317'
          - name: DD_ENV
            value: production
          - name: ASPNETCORE_ENVIRONMENT
            value: 'production'
          - name: DD_DOTNET_TRACER_HOME
            value: /data/datadog
          - name: DD_AGENT_HOST
            value: datadog.datadog.svc.cluster.local
          - name: DD_RUNTIME_METRICS_ENABLED
            value: 'true'
          - name: DD_DYNAMIC_INSTRUMENTATION_ENABLED
            value: 'true'
          - name: CORECLR_ENABLE_PROFILING
            value: '1'
          - name: CORECLR_PROFILER
            value: '{846F5F1C-F9AE-4B07-969E-05C26BC060D8}'
          - name: CORECLR_PROFILER_PATH
            value: /data/datadog/Datadog.Trace.ClrProfiler.Native.so
          - name: IpRateLimiting__EnableEndpointRateLimiting
            value: "false"
          - name: IpRateLimiting__GeneralRules__2__Endpoint
            value: '*:/graphql'
          - name: IpRateLimiting__GeneralRules__2__Period
            value: 1s
          - name: IpRateLimiting__GeneralRules__2__Limit
            value: "10"
          - name: IpRateLimiting__IpBanMinute
            value: "10"
          - name: IpRateLimiting__IpBanThresholdCount
            value: "5"
          - name: IpRateLimiting__IpWhiteList__1
            value: ::ffff:3.18.248.125
          - name: IpRateLimiting__IpWhiteList__2
            value: ::ffff:13.124.239.97
          - name: IpRateLimiting__IpWhiteList__3
            value: ::ffff:118.131.110.197
          - name: IpRateLimiting__IpWhiteList__4
            value: ::ffff:10.42.2.0
          - name: IpRateLimiting__IpWhiteList__5
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: status.hostIP
          - name: Headless__AccessControlService__AccessControlServiceType
            value: local
          - name: Headless__AccessControlService__AccessControlServiceConnectionString
            value: https://9c-cluster-config.s3.us-east-2.amazonaws.com/9c-main/odin/whitelist.json
          - name: PLUGIN_PATH
            value: /data
          - name: DOTNET_gcServer
            value: "1"
        image: planetariumhq/ninechronicles-headless:260
        imagePullPolicy: Always
        name: validator-5
        ports:
        - containerPort: 31234
          name: headless
          protocol: TCP
        - containerPort: 80
          name: graphql
          protocol: TCP
        - containerPort: 6000
          name: gossip
          protocol: TCP
        livenessProbe:
          exec:
            command:
            - /bin/liveness_probe_validator.sh
          failureThreshold: 3
          initialDelaySeconds: 1800
          periodSeconds: 30
          timeoutSeconds: 30
        resources:
          requests:
            cpu: 2
            memory: 20Gi
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /data
          name: validator-data-5
        - mountPath: /bin/liveness_probe_validator.sh
          name: probe-script
          readOnly: true
          subPath: liveness_probe_validator.sh
        - mountPath: /bin/readiness_probe.sh
          name: probe-script
          readOnly: true
          subPath: readiness_probe.sh
        - mountPath: /app/logs
          name: json-log
        - mountPath: /app/appsettings.configmap.json
          name: appsettings
          subPath: appsettings.json
      nodeSelector:
        node.kubernetes.io/network: heimdall
        node.kubernetes.io/node-index: "3"
      tolerations:
        - effect: NoSchedule
          key: dedicated
          operator: Equal
          value: validator-test
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      terminationGracePeriodSeconds: 30
      volumes:
      - configMap:
          defaultMode: 448
          name: heimdall-probe-script
        name: probe-script
      - name: download-snapshot-script
        configMap:
          defaultMode: 0700
          name: heimdall-download-snapshot-script
      - hostPath:
          path: /var/log/headless
          type: DirectoryOrCreate
        name: json-log
      - name: appsettings
        configMap:
          defaultMode: 0700
          name: appsettings
      - name: validator-data-5
        persistentVolumeClaim:
          claimName: remote-headless-data-3-remote-headless-3-0
  updateStrategy:
    type: RollingUpdate
---
# Source: 9c-network/templates/worldboss.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: world-boss-service
    app.kubernetes.io/instance: heimdall
  name: world-boss-service
  namespace: heimdall
spec:
  podManagementPolicy: OrderedReady
  replicas: 1
  selector:
    matchLabels:
      app: world-boss-service
  serviceName: world-boss-service
  template:
    metadata:
      labels:
        app: world-boss-service
    spec:
      containers:
        - args:
            - alembic upgrade head && python main.py 8 600 0.0.0.0 5000
          command:
            - /bin/sh
            - -c
          env:
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  key: database-url
                  name: world-boss-env
            - name: REDIS_HOST
              valueFrom:
                secretKeyRef:
                  key: redis-host
                  name: world-boss-env
            - name: REDIS_PORT
              valueFrom:
                secretKeyRef:
                  key: redis-port
                  name: world-boss-env
            - name: KMS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: kms-key-id
                  name: world-boss-env
            - name: SLACK_TOKEN
              valueFrom:
                secretKeyRef:
                  key: slack-token
                  name: world-boss-env
            - name: CELERY_BROKER_URL
              valueFrom:
                secretKeyRef:
                  key: celery-broker-url
                  name: world-boss-env
            - name: CELERY_RESULT_BACKEND
              valueFrom:
                secretKeyRef:
                  key: celery-result-backend
                  name: world-boss-env
            - name: SLACK_SIGNING_SECRET
              valueFrom:
                secretKeyRef:
                  key: slack-signing-secret
                  name: world-boss-env
            - name: SENTRY_DSN
              valueFrom:
                secretKeyRef:
                  key: sentry-dsn
                  name: world-boss-env
            - name: GRAPHQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: graphql-password
                  name: world-boss-env
            - name: SLACK_CHANNEL_ID
              valueFrom:
                secretKeyRef:
                  key: slack-channel-id
                  name: world-boss-env
            - name: HEADLESS_URL
              valueFrom:
                secretKeyRef:
                  key: headless-url
                  name: world-boss-env
            - name: DATA_PROVIDER_URL
              valueFrom:
                secretKeyRef:
                  key: data-provider-url
                  name: world-boss-env
            - name: HEADLESS_JWT_SECRET
              valueFrom:
                secretKeyRef:
                  key: headless-jwt-secret
                  name: world-boss-env
            - name: HEADLESS_JWT_ISS
              valueFrom:
                secretKeyRef:
                  key: headless-jwt-iss
                  name: world-boss-env
            - name: HEADLESS_JWT_ALGORITHM
              valueFrom:
                secretKeyRef:
                  key: headless-jwt-algorithm
                  name: world-boss-env
            - name: PLANET_ID
              valueFrom:
                secretKeyRef:
                  key: planet-id
                  name: world-boss-env
          image: planetariumhq/world-boss-service:git-201df547889b4bbc3f47f4af86657a29d2064074
          name: world-boss-service
          ports:
            - containerPort: 5000
      restartPolicy: Always
      serviceAccount: heimdall-onboarding-iam-role
      serviceAccountName: heimdall-onboarding-iam-role
  updateStrategy:
    type: RollingUpdate
---
# Source: 9c-network/templates/worldboss.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: world-boss-worker
    app.kubernetes.io/instance: heimdall
  name: world-boss-worker
  namespace: heimdall
spec:
  podManagementPolicy: OrderedReady
  replicas: 1
  selector:
    matchLabels:
      app: world-boss-worker
  serviceName: world-boss-worker
  template:
    metadata:
      labels:
        app: world-boss-worker
    spec:
      containers:
        - args:
            - celery -A world_boss.app.tasks:celery worker -l DEBUG
          command:
            - /bin/sh
            - -c
          env:
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  key: database-url
                  name: world-boss-env
            - name: REDIS_HOST
              valueFrom:
                secretKeyRef:
                  key: redis-host
                  name: world-boss-env
            - name: REDIS_PORT
              valueFrom:
                secretKeyRef:
                  key: redis-port
                  name: world-boss-env
            - name: KMS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: kms-key-id
                  name: world-boss-env
            - name: SLACK_TOKEN
              valueFrom:
                secretKeyRef:
                  key: slack-token
                  name: world-boss-env
            - name: CELERY_BROKER_URL
              valueFrom:
                secretKeyRef:
                  key: celery-broker-url
                  name: world-boss-env
            - name: CELERY_RESULT_BACKEND
              valueFrom:
                secretKeyRef:
                  key: celery-result-backend
                  name: world-boss-env
            - name: SLACK_SIGNING_SECRET
              valueFrom:
                secretKeyRef:
                  key: slack-signing-secret
                  name: world-boss-env
            - name: SENTRY_DSN
              valueFrom:
                secretKeyRef:
                  key: sentry-dsn
                  name: world-boss-env
            - name: GRAPHQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: graphql-password
                  name: world-boss-env
            - name: SLACK_CHANNEL_ID
              valueFrom:
                secretKeyRef:
                  key: slack-channel-id
                  name: world-boss-env
            - name: HEADLESS_URL
              valueFrom:
                secretKeyRef:
                  key: headless-url
                  name: world-boss-env
            - name: DATA_PROVIDER_URL
              valueFrom:
                secretKeyRef:
                  key: data-provider-url
                  name: world-boss-env
            - name: HEADLESS_JWT_SECRET
              valueFrom:
                secretKeyRef:
                  key: headless-jwt-secret
                  name: world-boss-env
            - name: HEADLESS_JWT_ISS
              valueFrom:
                secretKeyRef:
                  key: headless-jwt-iss
                  name: world-boss-env
            - name: HEADLESS_JWT_ALGORITHM
              valueFrom:
                secretKeyRef:
                  key: headless-jwt-algorithm
                  name: world-boss-env
            - name: PLANET_ID
              valueFrom:
                secretKeyRef:
                  key: planet-id
                  name: world-boss-env
          image: planetariumhq/world-boss-service:git-201df547889b4bbc3f47f4af86657a29d2064074
          name: world-boss-worker
          ports:
            - containerPort: 5000
      restartPolicy: Always
      serviceAccount: heimdall-onboarding-iam-role
      serviceAccountName: heimdall-onboarding-iam-role
  updateStrategy:
    type: RollingUpdate
---
# Source: 9c-network/templates/block-interval-notifier.yaml
apiVersion: batch/v1
kind: CronJob
metadata:
  name: block-interval-notifier
  namespace: heimdall
spec:
  schedule: "0 0 * * *"
  successfulJobsHistoryLimit: 1
  failedJobsHistoryLimit: 1
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: slack-notifier
            image: alpine
            command:
            - /bin/sh
            - -c
            - |
              apk add --no-cache jq

              PROMETHEUS_RESPONSE=$(wget -qO- "${PROMETHEUS_URL}/api/v1/query?query=round%28avg_over_time%28ninechronicles_block_interval%7Bgroup%3D%27heimdall-validator%27%7D%5B1d%5D%29%2C%200.01%29")
              AVERAGE_VALUE=$(echo $PROMETHEUS_RESPONSE | jq -r '.data.result[-1].value[-1]')
              PAYLOAD="{\"text\":\"heimdall의 블록 인터벌 평균값은 '$AVERAGE_VALUE' 입니다.\"}"
              echo $PAYLOAD
              wget -qO- --post-data "$PAYLOAD" --header="Content-Type: application/json" $SLACK_WEBHOOK_URL > /dev/null 2>&1
            env:
            - name: PROMETHEUS_URL
              value: http://prometheus-server.monitoring.svc.cluster.local
            - name: SLACK_WEBHOOK_URL
              valueFrom:
                secretKeyRef:
                  name: slack
                  key: slack-webhook-url
          restartPolicy: OnFailure
---
# Source: 9c-network/templates/dp-daily-metric.yaml
apiVersion: batch/v1
kind: CronJob
metadata:
  name: dp-daily-metric
  namespace: heimdall
spec:
  concurrencyPolicy: Allow
  failedJobsHistoryLimit: 1
  jobTemplate:
    spec:
      backoffLimit: 2
      template:
        spec:
          initContainers:
          - name: set-date
            image: debian:latest
            command:
              - sh
              - -c
              - >
                apt-get update && apt-get install -y coreutils &&
                echo -n $(date -d 'yesterday' +%Y-%m-%d) > /etc/config/date &&
                echo "Date set to: $(cat /etc/config/date)"
            volumeMounts:
              - name: date-config
                mountPath: /etc/config
          containers:
          - command:
            - sh
            - -c
            - >
              dotnet NineChronicles.DataProvider.Executable.dll daily-metric-migration
              --mysql-server $(DP_HOST)
              --mysql-port $(DP_PORT)
              --mysql-username $(DP_USER)
              --mysql-password $(DP_TOKEN)
              --mysql-database $(DP_DATABASE)
              --date "$(cat /etc/config/date)"
            env:
            - name: DP_HOST
              valueFrom:
                secretKeyRef:
                  key: write-host
                  name: data-provider
            - name: DP_USER
              valueFrom:
                secretKeyRef:
                  key: user
                  name: data-provider
            - name: DP_TOKEN
              valueFrom:
                secretKeyRef:
                  key: token
                  name: data-provider
            - name: DP_PORT
              valueFrom:
                secretKeyRef:
                  key: port
                  name: data-provider
            - name: DP_DATABASE
              valueFrom:
                secretKeyRef:
                  key: database
                  name: data-provider
            image: planetariumhq/ninechronicles-dataprovider:250
            imagePullPolicy: Always
            name: dailymetric
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            resources:
              requests:
                cpu: "1"
                memory: 10Gi
            volumeMounts:
              - name: date-config
                mountPath: /etc/config
          restartPolicy: OnFailure
          schedulerName: default-scheduler
          terminationGracePeriodSeconds: 30
          volumes:
            - name: date-config
              emptyDir: {}
  schedule: 0 20 * * *
  successfulJobsHistoryLimit: 1
  suspend: false
---
# Source: 9c-network/templates/dp-user-migrator.yaml
apiVersion: batch/v1
kind: CronJob
metadata:
  name: dp-user-migrator
  namespace: heimdall
spec:
  concurrencyPolicy: Allow
  failedJobsHistoryLimit: 1
  jobTemplate:
    spec:
      backoffLimit: 2
      template:
        spec:
          containers:
          - args:
            - $(APP_PROTOCOL_VERSION_KEY)
            - $(SLACK_WEBHOOK_URL)
            command:
            - /bin/preload_headless.sh
            env:
            - name: APP_PROTOCOL_VERSION_KEY
              value: 200290/eE394bb942fa7c2d807C170C7Db7F26cb3EA037F/MEUCIQDtmXbXy9seYISvIxPbu1K5JH4yfar91pA+5qixFPp3BAIgCVAjBmO.6xBEUeyt6ezYgytsmngnI8SYKgS4GQF0jaw=/ZHU5OnRpbWVzdGFtcHUxMDoyMDI1LTAzLTEwZQ==
            - name: SLACK_WEBHOOK_URL
              valueFrom:
                secretKeyRef:
                  key: slack-webhook-url
                  name: slack
            image: planetariumhq/ninechronicles-headless:260
            imagePullPolicy: Always
            name: preload-headless
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            resources:
              requests:
                cpu: "1"
                memory: 10Gi
            volumeMounts:
            - mountPath: /bin/preload_headless.sh
              name: heimdall-snapshot-script-partition
              readOnly: true
              subPath: preload_headless.sh
            - mountPath: /data
              name: dp-user-migrator-volume
          dnsPolicy: ClusterFirst
          initContainers:
          - args:
            - $(APP_PROTOCOL_VERSION_KEY)
            - $(SLACK_WEBHOOK_URL)
            command:
            - /bin/preload_headless.sh
            env:
            - name: APP_PROTOCOL_VERSION_KEY
              value: 200290/eE394bb942fa7c2d807C170C7Db7F26cb3EA037F/MEUCIQDtmXbXy9seYISvIxPbu1K5JH4yfar91pA+5qixFPp3BAIgCVAjBmO.6xBEUeyt6ezYgytsmngnI8SYKgS4GQF0jaw=/ZHU5OnRpbWVzdGFtcHUxMDoyMDI1LTAzLTEwZQ==
            - name: SLACK_WEBHOOK_URL
              valueFrom:
                secretKeyRef:
                  key: slack-webhook-url
                  name: slack
            image: planetariumhq/ninechronicles-headless:260
            imagePullPolicy: Always
            name: preload-headless1
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            resources:
              requests:
                cpu: "1"
                memory: 10Gi
            volumeMounts:
            - mountPath: /bin/preload_headless.sh
              name: heimdall-snapshot-script-partition
              readOnly: true
              subPath: preload_headless.sh
            - mountPath: /data
              name: dp-user-migrator-volume
          - name: set-date
            image: debian:latest
            command:
              - sh
              - -c
              - >
                apt-get update && apt-get install -y coreutils &&
                echo -n $(date -d 'yesterday' +%Y-%m-%d) > /etc/config/date &&
                echo "Date set to: $(cat /etc/config/date)"
            volumeMounts:
              - name: date-config
                mountPath: /etc/config
          - name: chain-migration
            image: planetariumhq/ninechronicles-dataprovider:250
            command:
              - sh
              - '-c'
              - >
                dotnet NineChronicles.DataProvider.Executable.dll
                mysql-migration -o "/data/headless" --mysql-server $(DP_HOST)
                --mysql-port $(DP_PORT) --mysql-username $(DP_USER)
                --mysql-password $(DP_TOKEN) --mysql-database $(DP_DATABASE)
                --date "$(cat /etc/config/date)"
            env:
              - name: DP_HOST
                valueFrom:
                  secretKeyRef:
                    name: data-provider
                    key: write-host
              - name: DP_USER
                valueFrom:
                  secretKeyRef:
                    name: data-provider
                    key: user
              - name: DP_TOKEN
                valueFrom:
                  secretKeyRef:
                    name: data-provider
                    key: token
              - name: DP_PORT
                valueFrom:
                  secretKeyRef:
                    name: data-provider
                    key: port
              - name: DP_DATABASE
                valueFrom:
                  secretKeyRef:
                    name: data-provider
                    key: database
            resources:
              requests:
                cpu: '1'
                memory: 10Gi
            volumeMounts:
              - name: date-config
                mountPath: /etc/config
              - mountPath: /data
                name: dp-user-migrator-volume
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            imagePullPolicy: Always
          - command:
            - sh
            - -c
            - >
              dotnet NineChronicles.DataProvider.Executable.dll daily-metric-migration
              --mysql-server $(DP_HOST)
              --mysql-port $(DP_PORT)
              --mysql-username $(DP_USER)
              --mysql-password $(DP_TOKEN)
              --mysql-database $(DP_DATABASE)
              --date "$(cat /etc/config/date)"
            env:
            - name: DP_HOST
              valueFrom:
                secretKeyRef:
                  key: write-host
                  name: data-provider
            - name: DP_USER
              valueFrom:
                secretKeyRef:
                  key: user
                  name: data-provider
            - name: DP_TOKEN
              valueFrom:
                secretKeyRef:
                  key: token
                  name: data-provider
            - name: DP_PORT
              valueFrom:
                secretKeyRef:
                  key: port
                  name: data-provider
            - name: DP_DATABASE
              valueFrom:
                secretKeyRef:
                  key: database
                  name: data-provider
            image: planetariumhq/ninechronicles-dataprovider:250
            imagePullPolicy: Always
            name: dailymetric
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            resources:
              requests:
                cpu: "1"
                memory: 10Gi
            volumeMounts:
              - name: date-config
                mountPath: /etc/config
          - args:
            - NineChronicles.DataProvider.Executable.dll
            - user-data-migration
            - -o
            - /data/headless
            - --rocksdb-storetype
            - new
            - --mysql-server
            - $(DP_HOST)
            - --mysql-port
            - $(DP_PORT)
            - --mysql-username
            - $(DP_USER)
            - --mysql-password
            - $(DP_TOKEN)
            - --mysql-database
            - $(DP_DATABASE)
            - --slack-token
            - $(DP_SLACK_TOKEN)
            - --slack-channel
            - $(DP_SLACK_CHANNEL)
            - --network
            - $(DP_NETWORK)
            - --bulk-files-folder
            - /data
            command:
            - dotnet
            env:
            - name: DP_HOST
              valueFrom:
                secretKeyRef:
                  key: write-host
                  name: data-provider
            - name: DP_USER
              valueFrom:
                secretKeyRef:
                  key: user
                  name: data-provider
            - name: DP_TOKEN
              valueFrom:
                secretKeyRef:
                  key: token
                  name: data-provider
            - name: DP_PORT
              valueFrom:
                secretKeyRef:
                  key: port
                  name: data-provider
            - name: DP_DATABASE
              valueFrom:
                secretKeyRef:
                  key: database
                  name: data-provider
            - name: DP_SLACK_TOKEN
              valueFrom:
                secretKeyRef:
                  key: slack-token
                  name: data-provider
            - name: DP_SLACK_CHANNEL
              valueFrom:
                secretKeyRef:
                  key: slack-channel
                  name: data-provider
            - name: DP_NETWORK
              valueFrom:
                secretKeyRef:
                  key: network
                  name: data-provider
            image: planetariumhq/ninechronicles-dataprovider:250
            imagePullPolicy: Always
            name: migration
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            resources:
              requests:
                cpu: "1"
                memory: 10Gi
            volumeMounts:
            - mountPath: /data
              name: dp-user-migrator-volume
          restartPolicy: OnFailure
          schedulerName: default-scheduler
          terminationGracePeriodSeconds: 30
          volumes:
          - configMap:
              defaultMode: 448
              name: heimdall-snapshot-script-partition
            name: heimdall-snapshot-script-partition
          - configMap:
              defaultMode: 448
              name: reset-snapshot-script
            name: reset-snapshot-script
          - name: dp-user-migrator-volume
            persistentVolumeClaim:
              claimName: dp-user-migrator-volume
          - name: date-config
            emptyDir: {}
  schedule: 0 0 * * *
  successfulJobsHistoryLimit: 1
---
# Source: 9c-network/templates/snapshot-full.yaml
apiVersion: batch/v1
kind: CronJob
metadata:
  name: snapshot-full
  namespace: heimdall
  labels:
    app.kubernetes.io/instance: heimdall
spec:
  jobTemplate:
    spec:
      template:
        spec:
          initContainers:
          - name: preload-headless
            image: planetariumhq/ninechronicles-headless:260
            args:
            - $(APP_PROTOCOL_VERSION_KEY)
            - $(SLACK_WEBHOOK_URL)
            command:
            - /bin/preload_headless.sh
            env:
            - name: APP_PROTOCOL_VERSION_KEY
              value: 200290/eE394bb942fa7c2d807C170C7Db7F26cb3EA037F/MEUCIQDtmXbXy9seYISvIxPbu1K5JH4yfar91pA+5qixFPp3BAIgCVAjBmO.6xBEUeyt6ezYgytsmngnI8SYKgS4GQF0jaw=/ZHU5OnRpbWVzdGFtcHUxMDoyMDI1LTAzLTEwZQ==
            - name: SLACK_WEBHOOK_URL
              valueFrom:
                secretKeyRef:
                  name: slack
                  key: slack-webhook-url
            resources:
              requests:
                cpu: "1"
                memory: 10Gi
            volumeMounts:
            - name: script-volume
              mountPath: /bin/preload_headless.sh
              readOnly: true
              subPath: preload_headless.sh
            - name: snapshot-volume-full
              mountPath: /data
          containers:
          - name: upload-snapshot
            image: planetariumhq/ninechronicles-snapshot:git-96c1475107e14eeb81ed2a8fbba492952fbac99c
            args:
            - $(APP_PROTOCOL_VERSION_KEY)
            - $(SLACK_WEBHOOK_URL)
            - $(CF_DISTRIBUTION_ID)
            - main/heimdall/partition
            command:
            - /bin/upload_snapshot.sh
            env:
            - name: APP_PROTOCOL_VERSION_KEY
              value: 200290/eE394bb942fa7c2d807C170C7Db7F26cb3EA037F/MEUCIQDtmXbXy9seYISvIxPbu1K5JH4yfar91pA+5qixFPp3BAIgCVAjBmO.6xBEUeyt6ezYgytsmngnI8SYKgS4GQF0jaw=/ZHU5OnRpbWVzdGFtcHUxMDoyMDI1LTAzLTEwZQ==
            - name: SLACK_WEBHOOK_URL
              valueFrom:
                secretKeyRef:
                  name: slack
                  key: slack-webhook-url
            - name: CF_DISTRIBUTION_ID
              valueFrom:
                secretKeyRef:
                  name: aws-keys
                  key: cf_distribution_id
            - name: SLACK_TOKEN
              valueFrom:
                secretKeyRef:
                  name: slack
                  key: slack-token
            resources:
              requests:
                cpu: "1"
                memory: 10Gi
            volumeMounts:
            - name: script-volume
              mountPath: /bin/upload_snapshot.sh
              readOnly: true
              subPath: upload_snapshot.sh
            - name: snapshot-volume-full
              mountPath: /data
            - name: aws-keys
              mountPath: /secret
              readOnly: true
          restartPolicy: OnFailure
          volumes:
          - name: script-volume
            configMap:
              defaultMode: 0700
              name: heimdall-snapshot-script-full
          - name: download-snapshot-script
            configMap:
              defaultMode: 0700
              name: heimdall-download-snapshot-script
          - name: snapshot-volume-full
            persistentVolumeClaim:
              claimName: snapshot-volume-full
          - name: aws-keys
            secret:
              secretName: aws-keys
  schedule: 0 6 * * *
  successfulJobsHistoryLimit: 1
  failedJobsHistoryLimit: 1
  suspend: false
---
# Source: 9c-network/templates/snapshot-partition.yaml
apiVersion: batch/v1
kind: CronJob
metadata:
  name: snapshot-partition
  namespace: heimdall
spec:
  jobTemplate:
    spec:
      template:
        spec:
          initContainers:
          - name: preload-headless
            image: planetariumhq/ninechronicles-headless:260
            args:
            - $(APP_PROTOCOL_VERSION_KEY)
            - $(SLACK_WEBHOOK_URL)
            command:
            - /bin/preload_headless.sh
            env:
            - name: APP_PROTOCOL_VERSION_KEY
              value: 200290/eE394bb942fa7c2d807C170C7Db7F26cb3EA037F/MEUCIQDtmXbXy9seYISvIxPbu1K5JH4yfar91pA+5qixFPp3BAIgCVAjBmO.6xBEUeyt6ezYgytsmngnI8SYKgS4GQF0jaw=/ZHU5OnRpbWVzdGFtcHUxMDoyMDI1LTAzLTEwZQ==
            - name: SLACK_WEBHOOK_URL
              valueFrom:
                secretKeyRef:
                  name: slack
                  key: slack-webhook-url
            resources:
              requests:
                cpu: "1"
                memory: 10Gi
            volumeMounts:
            - name: script-volume
              mountPath: /bin/preload_headless.sh
              readOnly: true
              subPath: preload_headless.sh
            - name: snapshot-volume-partition
              mountPath: /data
          containers:
          - name: upload-snapshot
            image: planetariumhq/ninechronicles-snapshot:git-96c1475107e14eeb81ed2a8fbba492952fbac99c
            args:
            - $(APP_PROTOCOL_VERSION_KEY)
            - $(SLACK_WEBHOOK_URL)
            - $(CF_DISTRIBUTION_ID)
            - main/heimdall/partition
            command:
            - /bin/upload_snapshot.sh
            env:
            - name: APP_PROTOCOL_VERSION_KEY
              value: 200290/eE394bb942fa7c2d807C170C7Db7F26cb3EA037F/MEUCIQDtmXbXy9seYISvIxPbu1K5JH4yfar91pA+5qixFPp3BAIgCVAjBmO.6xBEUeyt6ezYgytsmngnI8SYKgS4GQF0jaw=/ZHU5OnRpbWVzdGFtcHUxMDoyMDI1LTAzLTEwZQ==
            - name: SLACK_WEBHOOK_URL
              valueFrom:
                secretKeyRef:
                  name: slack
                  key: slack-webhook-url
            - name: CF_DISTRIBUTION_ID
              valueFrom:
                secretKeyRef:
                  name: aws-keys
                  key: cf_distribution_id
            - name: SLACK_TOKEN
              valueFrom:
                secretKeyRef:
                  name: slack
                  key: slack-token
            resources:
              requests:
                cpu: "1"
                memory: 10Gi
            volumeMounts:
            - name: script-volume
              mountPath: /bin/upload_snapshot.sh
              readOnly: true
              subPath: upload_snapshot.sh
            - name: download-snapshot-script
              mountPath: /bin/download_snapshot.sh
              readOnly: true
              subPath: download_snapshot.sh
            - name: snapshot-volume-partition
              mountPath: /data
            - name: aws-keys
              mountPath: /secret
              readOnly: true
          restartPolicy: OnFailure
          volumes:
          - name: script-volume
            configMap:
              defaultMode: 0700
              name: heimdall-snapshot-script-partition
          - name: download-snapshot-script
            configMap:
              defaultMode: 0700
              name: heimdall-download-snapshot-script
          - name: snapshot-volume-partition
            persistentVolumeClaim:
              claimName: snapshot-volume-partition
          - name: aws-keys
            secret:
              secretName: aws-keys
  schedule: 0 0 * * *
  successfulJobsHistoryLimit: 1
  failedJobsHistoryLimit: 1
  suspend: false
---
# Source: 9c-network/templates/jwt-headless.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: jwt-headless-ingress
  namespace: heimdall
  annotations:
    traefik.ingress.kubernetes.io/affinity: "true"
spec:
  rules:
    - host: heimdall-jwt.nine-chronicles.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: jwt-headless
                port:
                  number: 80
    - host: heimdall-rke2-jwt-gql.nine-chronicles.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: jwt-headless
                port:
                  number: 80
---
# Source: 9c-network/templates/remote-headless.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: remote-headless-1-ingress
  namespace: heimdall
  annotations:
    traefik.ingress.kubernetes.io/affinity: "true"
spec:
  rules:
    - host: heimdall-rpc-1.nine-chronicles.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: remote-headless-1
                port:
                  number: 80
    - host: heimdall-rke2-gql-1.nine-chronicles.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: remote-headless-1
                port:
                  number: 80
---
# Source: 9c-network/templates/remote-headless.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: remote-headless-2-ingress
  namespace: heimdall
  annotations:
    traefik.ingress.kubernetes.io/affinity: "true"
spec:
  rules:
    - host: heimdall-rpc-2.nine-chronicles.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: remote-headless-2
                port:
                  number: 80
    - host: heimdall-rke2-gql-2.nine-chronicles.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: remote-headless-2
                port:
                  number: 80
---
# Source: 9c-network/templates/validator.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: validator-5-ingress
  namespace: heimdall
  annotations:
    traefik.ingress.kubernetes.io/affinity: "true"
spec:
  rules:
    - host: heimdall-validator-1.nine-chronicles.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: validator-5
                port:
                  number: 80
    - host: heimdall-rke2-validator-1-gql.nine-chronicles.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: validator-5
                port:
                  number: 80
---
# Source: 9c-network/templates/secret-arena.yaml
apiVersion: "external-secrets.io/v1beta1"
kind: ExternalSecret
metadata:
  name: arena
  namespace: heimdall
  labels:
    app.kubernetes.io/instance: heimdall
spec:
  refreshInterval: 1m
  secretStoreRef:
    name: heimdall-secretsmanager
    kind: SecretStore
  target:
    name: arena
    creationPolicy: Owner
  dataFrom:
  - extract:
      key: 9c-main-v2/heimdall/arena
---
# Source: 9c-network/templates/secret-aws-keys.yaml
apiVersion: "external-secrets.io/v1beta1"
kind: ExternalSecret
metadata:
  name: aws-keys
  namespace: heimdall
  labels:
    app.kubernetes.io/instance: heimdall
spec:
  refreshInterval: 1m
  secretStoreRef:
    name: heimdall-secretsmanager
    kind: SecretStore
  target:
    name: aws-keys
    creationPolicy: Owner
  dataFrom:
  - extract:
      key: 9c-main-v2/heimdall/aws-keys
---
# Source: 9c-network/templates/secret-data-provider.yaml
apiVersion: "external-secrets.io/v1beta1"
kind: ExternalSecret
metadata:
  name: data-provider
  namespace: heimdall
  labels:
    app.kubernetes.io/instance: heimdall
spec:
  refreshInterval: 1m
  secretStoreRef:
    name: heimdall-secretsmanager
    kind: SecretStore
  target:
    name: data-provider
    creationPolicy: Owner
  dataFrom:
  - extract:
      key: 9c-main-v2/heimdall/data-provider
---
# Source: 9c-network/templates/secret-market-db.yaml
apiVersion: "external-secrets.io/v1beta1"
kind: ExternalSecret
metadata:
  name: market-db
  namespace: heimdall
  labels:
    app.kubernetes.io/instance: heimdall
spec:
  refreshInterval: 1m
  secretStoreRef:
    name: heimdall-secretsmanager
    kind: SecretStore
  target:
    name: market-db
    creationPolicy: Owner
  dataFrom:
  - extract:
      key: 9c-main-v2/heimdall/market-db
---
# Source: 9c-network/templates/secret-private-keys.yaml
apiVersion: "external-secrets.io/v1beta1"
kind: ExternalSecret
metadata:
  name: private-keys
  namespace: heimdall
  labels:
    app.kubernetes.io/instance: heimdall
spec:
  refreshInterval: 1m
  secretStoreRef:
    name: heimdall-secretsmanager
    kind: SecretStore
  target:
    name: private-keys
    creationPolicy: Owner
  dataFrom:
  - extract:
      key: 9c-main-v2/heimdall/private-keys
---
# Source: 9c-network/templates/secret-slack-token.yaml
apiVersion: "external-secrets.io/v1beta1"
kind: ExternalSecret
metadata:
  name: slack
  namespace: heimdall
  labels:
    app.kubernetes.io/instance: heimdall
spec:
  refreshInterval: 1m
  secretStoreRef:
    name: heimdall-secretsmanager
    kind: SecretStore
  target:
    name: slack
    creationPolicy: Owner
  dataFrom:
  - extract:
      key: 9c-main-v2/heimdall/slack
---
# Source: 9c-network/templates/secret-world-boss.yaml
apiVersion: "external-secrets.io/v1beta1"
kind: ExternalSecret
metadata:
  name: world-boss-env
  namespace: heimdall
  labels:
    app.kubernetes.io/instance: heimdall
spec:
  refreshInterval: 1m
  secretStoreRef:
    name: heimdall-secretsmanager
    kind: SecretStore
  target:
    name: world-boss-env
    creationPolicy: Owner
  dataFrom:
  - extract:
      key: 9c-main-v2/heimdall/world-boss-env
---
# Source: 9c-network/templates/gateway.yaml
apiVersion: gateway.networking.k8s.io/v1
kind: GRPCRoute
metadata:
  name: gateway-route-remote-headless-grpc
  namespace: heimdall
  annotations:
spec:
  parentRefs:
  - name: traefik-gateway
    namespace: traefik
    sectionName: grpc
  - name: traefik-gateway
    namespace: heimdall
    sectionName: grpc
  hostnames:
    
    - heimdall-rpc.nine-chronicles.com
    - heimdall-rke2-gql.nine-chronicles.com
  rules:
    - backendRefs:
      - name: remote-headless-1
        port: 31238
      - name: remote-headless-2
        port: 31238
---
# Source: 9c-network/templates/gateway.yaml
apiVersion: gateway.networking.k8s.io/v1
kind: HTTPRoute
metadata:
  name: gateway-route-remote-headless-web
  namespace: heimdall
  annotations:
spec:
  parentRefs:
  - name: traefik-gateway
    namespace: traefik
    sectionName: web
  - name: traefik-gateway
    namespace: heimdall
    sectionName: web
  - name: traefik-gateway
    namespace: traefik
    sectionName: websecure
  - name: traefik-gateway
    namespace: heimdall
    sectionName: websecure
  hostnames:
    
    - heimdall-rpc.nine-chronicles.com
    - heimdall-rke2-gql.nine-chronicles.com
  rules:
    - backendRefs:
      - name: remote-headless-1
        port: 80
      - name: remote-headless-2
        port: 80
---
# Source: 9c-network/templates/gateway.yaml
apiVersion: gateway.networking.k8s.io/v1
kind: HTTPRoute
metadata:
  name: gateway-route-data-provider-write-web
  namespace: heimdall
  annotations:
spec:
  parentRefs:
  - name: traefik-gateway
    namespace: traefik
    sectionName: web
  - name: traefik-gateway
    namespace: heimdall
    sectionName: web
  - name: traefik-gateway
    namespace: traefik
    sectionName: websecure
  - name: traefik-gateway
    namespace: heimdall
    sectionName: websecure
  hostnames:
    
    - heimdall-dp.9c.gg
  rules:
    - backendRefs:
      - name: data-provider-write
        port: 80
---
# Source: 9c-network/templates/gateway.yaml
apiVersion: gateway.networking.k8s.io/v1
kind: HTTPRoute
metadata:
  name: gateway-route-market-service-web
  namespace: heimdall
  annotations:
spec:
  parentRefs:
  - name: traefik-gateway
    namespace: traefik
    sectionName: web
  - name: traefik-gateway
    namespace: heimdall
    sectionName: web
  - name: traefik-gateway
    namespace: traefik
    sectionName: websecure
  - name: traefik-gateway
    namespace: heimdall
    sectionName: websecure
  hostnames:
    
    - heimdall-market.9c.gg
  rules:
    - backendRefs:
      - name: market-service
        port: 80
---
# Source: 9c-network/templates/gateway.yaml
apiVersion: gateway.networking.k8s.io/v1
kind: HTTPRoute
metadata:
  name: gateway-route-world-boss-service-web
  namespace: heimdall
  annotations:
spec:
  parentRefs:
  - name: traefik-gateway
    namespace: traefik
    sectionName: web
  - name: traefik-gateway
    namespace: heimdall
    sectionName: web
  - name: traefik-gateway
    namespace: traefik
    sectionName: websecure
  - name: traefik-gateway
    namespace: heimdall
    sectionName: websecure
  hostnames:
    
    - heimdall-world-boss.9c.gg
  rules:
    - backendRefs:
      - name: world-boss-service
        port: 80
---
# Source: 9c-network/templates/gateway.yaml
apiVersion: gateway.networking.k8s.io/v1
kind: HTTPRoute
metadata:
  name: gateway-route-arena-service-web
  namespace: heimdall
  annotations:
spec:
  parentRefs:
  - name: traefik-gateway
    namespace: traefik
    sectionName: web
  - name: traefik-gateway
    namespace: heimdall
    sectionName: web
  - name: traefik-gateway
    namespace: traefik
    sectionName: websecure
  - name: traefik-gateway
    namespace: heimdall
    sectionName: websecure
  hostnames:
    
    - heimdall-arena-rke2.9c.gg
  rules:
    - backendRefs:
      - name: arena-service
        port: 80
---
# Source: 9c-network/templates/metallb-ip-pool.yaml
apiVersion: metallb.io/v1beta1
kind: IPAddressPool
metadata:
  name: heimdall-rke2-ip-pool
  namespace: metallb
  labels:
    app.kubernetes.io/instance: heimdall
spec:
  autoAssign: false
  addresses:
    - 49.247.4.178/32
    - 49.247.4.184/32
    - 49.247.14.80/32
    - 49.247.14.87/32
---
# Source: 9c-network/templates/secret-store.yaml
apiVersion: "external-secrets.io/v1beta1"
kind: SecretStore
metadata:
  name: heimdall-secretsmanager
  namespace: heimdall
spec:
  provider:
    aws:
      service: SecretsManager
      region: us-east-2
